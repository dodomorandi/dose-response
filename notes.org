* Tentative roadmap to 1.0.0
** DONE NPCs
CLOSED: [2018-01-25 Thu 13:05]
** DONE Menu
CLOSED: [2018-01-30 Tue 09:51]
*** Implied by Save/Load
*** Or is it? Maybe we could just always load if there is a saved game...
*** But we should have a menu anyway
*** On `Esc`
** DONE Don't abort on `Q` keypress
CLOSED: [2018-01-29 Mon 20:27]
** DONE Save/load game
CLOSED: [2018-02-03 Sat 08:23]
** DONE Fullscreen with correct aspect-ratio handling
CLOSED: [2018-02-04 Sun 10:09]
*** This was done but we broke it when adding font handling
** More balanced gameplay
*** including safe starting areas (no overdose risks)
** Ending: finding a special NPC who gets generated after max Will
*** immobile
*** Must disappear when high
*** Should show a direction towards them
*** Spawn a ton of extra monsters?
**** just on the direct route though?
**** so a longer route would be safer
*** bug-glyph-misaligned.png
** DONE Integrated help
CLOSED: [2018-01-25 Thu 13:05]
*** When you press `?`
*** Should show
**** Controls
**** How to play
**** Tips
** DONE Nice colours
CLOSED: [2018-03-24 Sat 14:35]
*** good colour palette
*** distinct colours (so they're visible while High, too)
*** The `S` and `v` monsters are hard to spot
*** The blue doses are hard to see when High
** DONE Icon for the executable
CLOSED: [2018-03-29 Thu 16:02]
* Nice-to-have post 1.0.0
** Reasonable AI
*** monsters further away should not freak out when another monster is in the way
** World generation
** Monsters and player able to shatter walls
** DONE Non-square fonts for text
CLOSED: [2018-02-24 Sat 16:56]
** Localisation?
* Release checklist                                         :notes:checklist:
- [ ] Create a new release in CHANGELOG.md
- [ ] Take a screenshot
- [ ] Move the screenshot to Dose Response's screenshots directory
- [ ] Commit the screenshot in the repo
- [ ] Bump the version in Cargo.toml
- [ ] Run: `cargo check; cargo build; cargo build --release; make wasm-release`
- [ ] Test the wasm version
- [ ] Run: `make release`
- [ ] cp target/web/* files to the project website
- [ ] Copy the screenshot to the project website
- [ ] Verify the binaries get created in the github release page
- [ ] Test the builds [0/3]
  - [ ] Test all the Windows Builds
  - [ ] Test the linux builds on geralt
  - [ ] Test the linux builds on worklaptop
- [ ] Update the project page [0/3]
  - [ ] Update screenshot
  - [ ] Update the "what's new" section
  - [ ] Update the links to the latest builds
- [ ] Update the github release page [0/3]
  - [ ] Update screenshot
  - [ ] Update the "what's new" section
  - [ ] Update the links to the latest builds
- [ ] Deploy the project website
- [ ] Optional: Write a release update blog post
- [ ] Optional: Record a lets play
* Game balance notes:
** DONE starting doses overlap
CLOSED: [2018-02-04 Sun 16:33]
** Immediatelly within starting doses' area
** DONE food can spawn at the player's location
CLOSED: [2018-02-04 Sun 16:33]
** DONE too many NPCs
CLOSED: [2018-02-04 Sun 17:48]
** Is the tolerance progression okay?
*** I have a feeling it builds up too slowly
*** But we definitely need to play some more and actually get to the endgame
*** Yea, I just won the game and I never had to use any of the strong stuff
*** Need to increase it
**** Did that, is it okay now?
* Marketing
** no crafting!
** no levels!
** no waiting!
** no orcs!
* Scrolling glitches                                                    :bug:
** Slow the scrolling down so they're easily visible
** Play the game & see what looks wrong
** IIRC some of the explored areas have a weird background or something
** There are some weird little bands around some glyphs
* Menu doesn't show the "Quit Without Saving" option                    :bug:
** It only shows "Save and Quit" but sometimes you don't want that
* Pressing Alt+Enter doesn't work                                       :bug:
** The screen flickers and then goes back
** Looking at the log, looks like the press is registered twice:
#+BEGIN_SRC
cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.13s
     Running `target/debug/dose-response`
12:04:55 [INFO] Recording the gameplay to 'replays/replay-2018-10-14T14-04-55.032'
12:04:55 [INFO] Using the sdl backend
12:04:57 [INFO] Pressed Alt+Enter, toggling fullscreen.
12:04:57 [INFO] [151] Switching to (desktop-type) fullscreen
12:04:57 [INFO] Window resized to: 3840x2160
12:04:57 [INFO] Pressed Alt+Enter, toggling fullscreen.
12:04:57 [INFO] [152] Switching fullscreen off
12:04:57 [INFO] Window resized to: 987x630
#+END_SRC
* Place Victory NPC in the Endgame
** Put it some distance away from the Player
*** Maybe 80 - 120 tiles?
* Add a signpost when deleting a Victory NPC on High
** bumping into it, you will see an explanation text
*** "Sober up, junkie!"
*** "Get sober and stay sober."
** That way the highlighted path can stay there
** and the player will be able to learn what happened
* Remove the sobriety counter from the game
* Balance the late game
** So I think the early to mid game is good
*** Until you start being able to collect doses
*** Tried to increase it too much and it didn't quite work out
**** The smallest doses were actually okay
**** But the larger ones weren't
**** Maybe increase their strength?
* Test winit fullscreen on windows
** We've updated Glium + winit to 0.12
*** TODO does it help?
** TODO Try cargo patching a newer winit version (the latest is 0.14)
** NOTE: we still need to ship SDL glium/glutin/winit still fails on wayland
*** TODO try patching those and using the latest source??
* Simplify the CI build scripts
** Move readme etc. generation to the process-artifacts.py script
** The CI should produce just the binary *maybe* with a readme pointing to the proper releases
* Fullscreen shows an extra column of the map glyphs to the left        :bug:
** should be fixed now?
** slow scrolling down & see
* Consider defaulting to X11 when running in Wayland
** https://github.com/tomaka/winit/issues/305
** do this before starting the window:
#+BEGIN_SRC
std::env::set_var("WINIT_UNIX_BACKEND", "x11");
#+END_SRC
** look if there's a way of setting this without the env vars?
** Anyway, this fixes our issues on Wayland Fedora 27
* Consider using GFX for both winit and sdl?
** That way we can verify whether the jaggedness is because of SDL or our code
* Add an option to set the graphics backend in the settings
** This will mean closing and reopenning the window
*** Or maybe we show "restart the game"
** Also, persisting the options somewhere
** We could ask people to try this out and say which should be the default
* Add a permanently updated savefile to protect against crashes
** E.g. something that would protect against the panic when we switch to fullscreen
*** that's solved right now in the latest winit and SDL
*** but things like that could still happen
** So this would be kind of like an autosave
*** prolly don't want to write to the disk every time something moves
*** but maybe creating a state every minute or w/e
*** and then differential updates on every state change
** Or maybe just fuck it and save the file on every update?
*** see if that's feasible
** Ideally, we'd just rename this file on "save & quit"
*** so we've got a single codepath for both explicit save and crash recovery
** If the starts and it sees a crash file, show "recover from crash" in the menu
*** prolly want to delete the crash file on clean exit
* Add a settings/config file
** Use json (ugh) because that's a serialisation format we already have in the code
** And we'll primarily use it from within the game
* Screen scrolling is jagged on Windows in Fullscreen
** hm, I can no longer reproduce this???
** let's just drop it for now and focus on the real stuff
* Try winit + raw opengl on Windows
** Using the same code path as the SDL backend
** Does this result in the same scrolling jaggedness as with SDL fullscreen?
** This way we can figure out if it's our opengl code or the SDL backend itself
* Make the textures power of two
** It may not be required by anything any more but it feels safer
** Would also test our build.rs tilesize generation to JS
* Move metrics into the engine                                         :code:
** We have a more granular control there
** We can see exactly how long teh full update took vs drawcall processing vs. sdl
* Investigate using LTO                                                :code:
** Set it in profile.release in Cargo.toml
** Should make compilation longer but speed the binary up
** Needs testing
** Apparently we set it in the CI release builds
* Record a let's play
** would be nice to show the game in action
** people can watch it and see whether it's interesting for them
** Steps:
cargo run --release
xwininfo  # find the Window ID
recordmydesktop --windowid <window id>
record
Ctrl-c
* Create an itch.io page
- [ ] Game description
- [ ] Colour scheme
- [ ] Font
- [ ] Lets play/trailer
- [ ] Cover image
- [ ] Icon/Logo for Try Jumping
- [ ] Icon/Logo for Dose Response
- [ ] Builds
- [ ] Link to the online version
* Create "organisation" github & gitlab pages
** Set up redirects
** Fix links on my blog
* Set up an org email address
** info@example.com
* Create a tryjumping.com page
** Use a Rust or Go-based static site generator
** https://gohugo.io/getting-started/quick-start/
** http://cobalt-org.github.io/getting-started/
* Add the code & contact info into the readme
** Link to the website
** Link to the repo
** Email address
* Release hardening
** Don't panic
*** Check for all `unwrap` calls
*** Check for all `except` calls
*** Check for all array access calls
** Profile the wasm version under supported browsers
** Find out the maximum drawcall count
*** And update the vec capacities
** Put real timing metrics in
** Look over all the engine modules
*** Glium
*** Sdl
*** Wasm
** Remove the unused backends
** Make all the default opengl background colours nice and consistent
* Consider using a fixed-step game loop?                               :code:
** A bunch of people on r/roguelikedev seem to do that
** Does that mean we have to decouple game update and render?
*** and call them separately from the engine?
** https://gafferongames.com/post/fix_your_timestep/
** http://gameprogrammingpatterns.com/game-loop.html
* Translate the game?                                                    :ui:
** I mean English is nice but it means my family won't be able to play it
** And the game did end up with much more text than I thought it would
** I could translate it to Czech myself
** What about Slovio though? Would that be possible?
*** Ever since I learned about it I've wanted to release a game in English & Slovio
*** I don't command it well enough though
*** Would have to find someone to help or at least check it out
*** http://www.slovio.com/
*** It would be easier in that we don't need to bring any new glyphs
**** Slovio uses good ole Latin alphabet
**** So maybe start with that?
**** Then again, for localisation, we'll have access to all strings
**** So we can build the bitmap font during compilation, too
* Consider uploading binaries to AWS or something
** Instead of having them on github
** Should make nightlies easier, too maybe?
* Look into trying the rust-sdl2's "bundled" feature
** Seems to be broken on Fedora 27 + Wayland
*** The bundled build just doesn't work
*** But the steamrt one (version 2.4 only; 2.6 is broken) does
*** Go to: http://repo.steamstatic.com/steamrt/pool/main/libs/libsdl2/
**** Download 'libsdl2_2.0.4+steamrt2+srt1_amd64.deb'
**** http://repo.steamstatic.com/steamrt/pool/main/libs/libsdl2/libsdl2_2.0.4+steamrt2+srt1_amd64.deb
*** Put it in a 'lib' directory
*** cp lib/libSDL2-2.0.so.0.4.0 lib/libSDL2-2.0.so.1
*** run code with: LD_LIBRARY_PATH=lib target/release/binary
*** Actually now I'm getting the examples build staticaly??
**** We need to create a SDL project and test this properly
** https://github.com/Rust-SDL2/rust-sdl2#bundled-feature
** It seems to build SDL2 as needed
** Maybe that can be almost as easy as using a pure rust solution?
*** Build dependencies:
**** cmake openssl-devel
*** We'll still need to handle runtime linking though (sigh)
**** RPATH in the release?
*** Test the controller examples
*** Test windows examples
*** Test ttf and image examples
**** require the "ttf" and "image" features
*** Check the drawing API
**** can we just use this?
**** could we use the TTF feature for fonts directly?
**** should be interesting as an optional backend
*** Pros:
**** Nice & robust drawing API?
**** Nice & robust font rendering API?
**** Joystick and gamepad support!
**** More robust keyboard support (afaict so far)
*** Cons:
**** Harder setup for coders (no longer just git clone && cargo run)
***** Maybe we could keep glium as the default feature
***** And use SDL for the shipped releases?
**** Extra deployment steps to ship the SDL libraries and link them
**** An entirely new set of bugs and missing features?
***** I mean it should be robust but idk
* Fullscreen crashes on Windows                                          :ui:
** Adding fullscreen to main menu crashes with this:
Switching to fullscreen.
Monitor: Some("\\\\.\\DISPLAY1"), pos: (0, 0), dimensions: (1920, 1080)
thread 'main' panicked at 'not yet implemented', C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\winit-0.10.0\src\platform\windows\window.rs:289:9
note: Run with `RUST_BACKTRACE=1` for a backtrace.
** https://github.com/tomaka/winit/blob/d92666c1880bad27d624dbbda2e14adc2b72e557/src/platform/windows/window.rs#L288
** https://github.com/tomaka/winit/issues/37
** https://github.com/tomaka/winit/issues/72
** Trying to initialise the fullscreen directly during window creation fails too
** So does doing "fullscreen" manually by setting the window size
*** again, not implemented
** DONE Consider making fullscreen a cargo feature and disabling it on windows
CLOSED: [2018-03-06 Tue 22:04]
** DONE Also, try handling panics on fullscreen so we don't crash
CLOSED: [2018-03-06 Tue 22:04]
*** Yea so there's catch_unwind:
**** https://doc.rust-lang.org/std/panic/fn.catch_unwind.html
**** except it doesn't compile with the Display type /o\
**** Because of the interior mutability inside that type
** TODO Also, see if we can just vendor winit/glutin/glium and fix it locally
*** and obviously upstreaming the changes
*** see how SDL does it?
*** Check out this article by Raymond Chen
**** https://blogs.msdn.microsoft.com/oldnewthing/20100412-00/?p=14353/
** I've disabled fullscreen on windows for now
*** but we need to fix this
* Test Quicksilver fullscreen
** https://github.com/ryanisaacg/quicksilver/commit/4705ff8a2baaa9d69b74dcef5f8b4186d920d6dc
** It seems to be working maybe?
** It's not running any of the dangerous calls afaics
** Give it a go
* Write a "call for artists" post?
** Here's what I'd like to see (in this order)
*** Icon
*** Colours
*** Font
*** Tiles
** Should post a demo
** Would prefer open formats
*** To keep with the open source spirit of the game
*** Something like CC-BY-SA sounds good
*** Must be available for commercial use (or at least licensed as such for me)
*** Expect zero profit but open to revenue sharing
** Post to:
*** website
*** twitter
*** g+
*** mastodon
*** maybe reddit?
* Select the final font / fonts                                          :ui:
** http://programmingfonts.org/list
** FYI Hero Trap uses "Dejavu Sans, monospace" and it looks pretty neat
* Add an icon to the generated executable on Windows
** window execs can have an icon embedded
** http://stackoverflow.com/questions/708238/how-do-i-add-an-icon-to-a-mingw-gcc-compiled-executable
* Make the game less dark
** It is actually really hard to see what's going on in withdrawal
** Ease off on the darkness fade somewhat
* Build nightlies
** Or have a way to build windows on my machine
*** Using wine
*** Or a VM
*** or cross-compile
* Consider using proper logging with in-game debug console             :code:
** The "no console" option for mingw seems to disable println entirely
** Even when we run the game from the console
** So: we should log to a file or some internal structure and print it out
* Show the current game build version in the main menu                   :ui:
** https://doc.rust-lang.org/cargo/reference/environment-variables.html
* Investigate terminal backend
** Libraries:
*** https://crates.io/crates/termion
*** https://crates.io/crates/rustbox
*** https://crates.io/crates/easycurses
*** https://crates.io/crates/crossterm
** Should be cross-platform
** Ideally no C deps (though I could live with that tbh)
* Use rect::Rectangle for Point::areas                                 :code:
* Split out the rendering functionality into a proper crate            :code:
** Call it "Charmed, I'm sure."
** Crates.io will be called "charmed"
* Add console printing to the wasm module
* Print out warnings if the js drawcalls and buffer capacities are exceeded
* Performance-tune the game
** minimise drawcalls and data transmission
** try to make sure we never have to grow our vectors
* NPCs should ignore monsters and destroy them when stepping on one    :idea:
** So this would make NPCs more like not even aware there are any monsters here
** But only when they are accompanying the player
* Pre-allocate the wasm drawcalls vecs better                          :code:
* Make the canvas drawing more performant                              :code:
** https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas
** Think about reducing the Draw::Rectangle and Draw::Fade data footprint
*** by like emulating an enum or something
* Consider uploading "nightlies" somewhere
** We run CI on every push, let's copy the binaries somewhere
** So we can always get the latest build out to folks
** Theoretically, this could be super easy with wasm
* Make it more obvious when the player would overdose :design:ui:
** https://www.reddit.com/r/roguelikedev/comments/686dey/sharing_saturday_152/dgwl1go/
** see alphabetr's comment in that thread
** we could show the likelihood that a dose would result in overdose
** should add it to the how-to-play readme (and on the website)
** mention it in the let's play
** there's already an association between the white colour and overdose
*** let's use it
*** say when you stand next to a dose, it will blink between it's colour and white
*** and the rate of blinking will identify the likelihood that the dose will kill you
* Consider replacing Action Points with energy-based approach          :code:
** Basically, we'll want to be able to have NPCs move more slowly than the player
** So we need a speed system
** One such is described here:
*** http://journal.stuffwithstuff.com/2014/07/15/a-turn-based-game-loop/
** It's not necessarily about AP/Energy-based
*** we just need a way to be able to "build" some action up across turns
*** but it does kind of seem to me that maybe AP is not the right mental model here
*** because you don't generally store up APs (with a few exceptions)
** One place to use this would be: friendly NPCs more half as slow to be more approachable
*** Right now we just stop them when they're nearby
*** But it would be more lively/dynamic if they still moved just more slowly
* Have Anxieties be able to destroy the terrain                        :idea:
** I'd love to have a monster that does that
** And Anxiety is already red (the colour of the shattering explosion)
** Breaking a wall should take one turn so it's twice as slow as empty terrain
** And then we'd just give the same ability to the player with the "pickaxe"
* Special "gun" equipment                                              :idea:
** changes the movement behaviour:
When there is a monster in the direction of the movement (within 4
tiles), shoot a ray that kills all monsters in its path instead of
moving in that direction.
** infinite "ammo"
** can't be unequipped/dropped
** relatively rare (think jetpack in spelunky)
** takes 1 action point
* Special "pickaxe" equipment                                          :idea:
** can't be unequipped/dropped
** bumping into a solid/blocking tile (i.e. "tree") destroys it
** takes 1 action point
* Make the NPCs "angry" when you "hit" them                            :idea:
** Right now, nothing happens when you bump into them
** So instead, let's make them faded like when you get High for a few turns
* Irresistible doses don't always atract                           :bug:idea:
** Seems that when there is a normal dose in the irresistible area we can break free
** I'll need to test the exact parameters of this
** But maybe we'll want to keep it there as an "easter egg rule"?
* Rework the animation system                                          :code:
** Right now it's a bunch of boxed traits and we have to match on dose type
** It would be easier if we could just specify the type of animation to the dose and have a function produce the right struct
** We could also support multiple animations, which would let us compose a cross animation by:
*** square explosion of 1 diagonal area + 2 (or 4) horizontal animation lines
* The screen sometimes scrolls earlier than it should                   :bug:
** I've noticed this with horizontal scrolls, but it may be vertical too?
* Need to keep moving while waiting on the victory counter           :design:
** Right now, the best strategy is to dance around a save spot, doing nothing
** We need to force the player to keep moving
** Some ideas:
*** Get the monsters into a frenzy and start attacking the player
*** Only count "sobriety points" when a new ground is explored
**** This is hard to discover so I'm not keen
*** Give the player a goal they can achieve only while sober
**** Say talking to a family NPC
**** Show an arrow to the NPC?
* Change the High colours/effect
** Using the same colour as the doses makes them easy to miss
** Consider adding some orange or whatnot instead
** some inspiration: http://www.printmag.com/design-inspiration/acid-aesthetic-history-of-psychedelic-design/
* Show the anxiety counter in the UI                                :ui:idea:
** this will make it clearer to figure out that you want to keep hunting the Wills
** We can start by showing will with a decimal counter
** Or a "next will" progress bar
* Investigate adding sound to the game                                 :code:
** Not sure about ambient music, but sound effects might be neat
** We can look at rodio
*** https://crates.io/crates/rodio
* When there's no dose in sight and you're withdrawn, point in a general direction :idea:
** But only when you have no doses and no food
** I.e. this is to stop you from being completely fucked
** Because right now in that state you just have to wander randomly and hope
* Distribute the doses based on a pattern                       :mapgen:idea:
** First I thought just put them across some jagged lines the player can follow
** But how about doing a tree-like or better yet (since we're 2D) neuron-like structure?
** It would give some structure to the map, the centres would have interesting clusters
** And if the player ever figures it out, might be cool
* Items that could reduce the dose effect                              :idea:
** from strike:
#+BEGIN_QUOTE
Other ideas and dynamics that come to mind: antabus would contradict
alcohol, stims vs downers, psychedelics (and a bad trip, depending on
what you encounter while high, might lower your craving for a next
dose but hurt your peace of mind or other stats), add paranoia and
other stats, make the player's psychological and physiological
conditions more detailed and readable (feels like blundering in a
black box atm).
#+END_QUOTE
** don't need to think about this too hard for now
** just create an item called "antidose" (yep, antidote pun)
** read up on the stuff mentioned in the quote for inspiration
** but initially, just disable post-high withdrawal (and maybe switch to sober immediately)
** there are meds that ease withdrawal effects
*** so maybe you're still withdrawn, but the screen wouldn't go dark so much
*** and the fov would not reduce so much
*** and it'd take more time for you to die (or maybe you wouldn't die at all, just transition to sober)
* Spending a long time in the "normal" state can add Will :idea:
* Adding a bad trip                                                    :idea:
** Small chance of that happening
** But would make things actually worse for the duration of the dose
** What would happen if you took another dose by then?
*** normal High but you risk overdosing yourself
* Victory condition: dose ascension                                    :idea:
** from strike:
#+BEGIN_QUOTE
An alternate victory condition could be "Ascension". When you combine
all sorts of chemical fireworks flowing in your veins and brains just
the right way and don't die in the process, you'll unlock the secrets
of the mind and become a badass ghost! :o) Maybe there could be a
key/enabler/artifact or more steps and hints, depending on what theme
you wanna go with. Aliens might be interesting (like the mysterious
complex drug is secretly an alien tech, for instance). The game might
indicate how your body morphs funny and how you feel strange and "hear
voices" etc., pulling you in one direction or the other. I don't think
I can think of a third option. Except maybe if you wanted to take this
route and make the path to ascension more complex, add distractions
and false drugs that lure you astray and kill your brain cells, making
it more difficult or something. Perhaps dreamy entheogens versus hard
stims  or whatnot, I dunno. // do research to get inspiration, wiki
and psychonaut websites are gonna be a goldmine, I'd say :p
#+END_QUOTE
** That's basically fantasy land so I'm not sure how I feel about this
*** I kind of like the idea because it provides an addict victory condition
*** Doesn't necessarily be a fantasy (consider the "golden shot" or whatever it's called)
*** Train your will enough so you can collect doses and then down like a 100 at a same time?
* Victory condition: stable addict                                     :idea:
** Train yourself enough to be able to carry doses around
** Explore the world?
** Maybe find something that you wouldn't be able to otherwise
** "I've stopped smoking but I have a cigarette once a year"
* Make the doses more interesting                                    :design:
** Right now they're kind of bland: just increase SoM
** from strike:
#+BEGIN_QUOTE
perhaps pick one really interesting (or invent a new hypothetical one)
that has useable body and mind feedback for gameplay - sky's the
limit. But a generic "something you're addicted to" is too 'meh' for a
game. Some backstory would add a lot to the experience, too.
#+END_QUOTE
* Mouse support                                                        :idea:
** Click on an inventory item to use it
** Click on a path to step one way towards it?
* Consider using just the cardinal movement                            :idea:
** Diagonals are hard on the beginners
** Maybe a mouse?
* Add a tutorial or something                                          :idea:
** Either a help doc or a tutorial or something to help the beginners
* Medication or sobriety badges                                        :idea:
** Instead of the 12-step bullshit
** You could come visit these centres
*** they'd feed you and somehow help you to combat the addiction
*** you could get sobriety bonuses (e.g. will increase, etc.)
* Effects for gaining/losing will                                        :ui:
** graphics (render it as a bar)
** consider displaying the partial will
*** say you have `Will = 5` but you've also killed three Anxieties, so your Will is more like `5.3`
*** maybe display the equivalent of the `.3` portion as a lighter bit on the Will progress bar
*** and as it gets closer to `1.0` its colour would get closer and closer to the "real Will colour"
** sound
* Longer-term developments of the addiction/state of mind            :design:
** like what can you do if you put off getting doses for long
** what happens when your tolerance builds up
** ideally, I'd like the gameplay to change substantially as you progress based on how you play
** also ideally with like different "gameplay curves" -- but all systems driven
* Get a small amount of "food effect" (SoM points when not high) on killing a Hunger :idea:
** Could encourage players to seek them out
** But it's obviously dangerous
** And it may cost you food if you overestimate (which fits fighting hunger)
* Ideas about the main scope / goals of the game                     :design:
Finding out food and collecting it is good. More items to collect? Maybe stuff
that changes the gameplay in some way? Like the items in spelunky.

We should have some endgoal. Thematically, I can only thinking of curing the
addiction, but that seems like something of an optional difficult goal (e.g.
Hell in Spelunky). And anyway, how are we going to deal with this? Some items to
find/pick up? I was thinking something like the 12 step program but that isn't
bullshit.

Maybe finding people and getting their forgiveness/acceptance? And/or more
generally: dealing with your past.

Maybe in terms of the non-curing way... I don't know. What does an addict want?
Read through the wiki and some real stories? Despite the Marla Daniels quote,
I'd like there to be a way to complete the game. Something that keeps you exploring.

Or let's make it a survival/exploration sim. That would put a lot of the game
into the worldgen (and systems) but it seems like it could fit this. Consider
e.g. removing almost all monsters from an area, see how it plays.

Anyway, let's start with making the world bigger then one screen without actually
changing anything else at the moment. And then play it for a while and see what happens.

* Depression only moves by 2 squares when following the player         :idea:
** When idle, it would only have 1 action point
** This ties into a more general idea of idle monsters and more complex AI
* Monsters that can modify the environment                             :idea:
** unblock passages
** block passages
** teleport the player?
* Gameplay beyond the first screen
** We need a greater pressure for exploration and leaving the area.
*** In my current playthroughs I just never care enough to leave.
*** consider tweaking the intoxication gain and drop to create stronger pressure
** Add different worlds the player can go to when leaving the map
*** this could either be completely random
*** or there may be a fixed or semi-fixed sequence (e.g. 2 tree worlds, than two other worlds, then three different worlds, etc.)
*** Some notes on different world generation:
http://gamedev.stackexchange.com/questions/31241/random-map-generation/31245#31245
** consider restricting the possible ways to leave the map
** Split a large map into sections generaded from the initial seed and their positions from center
*** My (probably fast) ad-hoc concoction:
#+BEGIN_SRC
fn position_based_seed(initial_seed: u32, x: i32, y: i32) -> u32 {
    let high = (x as u16) as u32;
    let low = (y as u16) as u32;
    let encoded_pos = high << 16 | low;
    initial_seed ^ encoded_pos
}
#+END_SRC
**** fast but produces low values for low inputs
*** Better: just feed the inputs through a hash
*** Maybe use the integer hash function by Thomas Wang
*** http://web.archive.org/web/20071223173210/http://www.concentric.net/~Ttwang/tech/inthash.htm
* More effects on High                                                 :idea:
** monsters get weaker (Dempression moving by one step per turn)
** dynamic / changing environment?
* Don't allow suicide (if there's a way to avoid it)                     :ui:
** e.g. fatfingering the arrow when the Depression is near
* Display the player's explored area on death                            :ui:
** As in, how many tiles they've explored
** Might be a bit tricky to calculate
** But it's another neat potential score thingy
** Isn't this more or less the same thing as the number of turns?
*** Not really -- this penalizes staying on the same place too long
* Pure terminal renderer                                                 :ui:
** We've already added a PoC using Rustbox
** Alternative library: Termion
*** http://ticki.github.io/blog/making-terminal-applications-in-rust-with-termion/
** TODO Refresh the screen on restart
** TODO Refresh the screen on motion
** TODO Add colours
** TODO Make the engines switchable (instead of running side by side)
** TODO Handle debug messages
*** Write them to log or something?
*** Or maybe just ignore that issue once the terminal is an optional thing
* Fade out Shadows & Voices when dying after attack                      :ui:
** fade to Color{r: 0, g: 0, b: 0} in 400ms
* Doses should show a glowing animation                                  :ui:
** i.e. moving between two corolurs
* Better display the movement of D monsters                              :ui:
** they're moving too fast currently (FPS dependent)
** we should show a path trail
** and also slow them down (visually -- so like they move every say 200ms, not every tick)
** this works now in the cheat mode but it's ugly
** we'll probably need to fade the "trail" out or something
* Smooth-out animations for the fade-out when growing Withdrawn          :ui:
** right now, they are discrete: from fade 50 to 45 in one frame
** better make it a fade animation of say 50ms or so
* Change the rate of the `High` animation based on intoxication          :ui:
** (very high: fast-paced, should slow down on the way to sobriety)
* Make the graphics on Overdose death glitchy                            :ui:
* Better radious / FoV calculation                                     :code:
Instead of looking at the points' coordinates, look at the actual (pixel) space
each tile represents. The tiles are not points but squares with an area. This
should provide a visually better result (but will be harder to compute).
* Effects when being hit/death                                           :ui:
** colour fade (or something) on stun, removed will, death, etc.
** sound
* Change player's colour on stunned/panicked                             :ui:
* Make sure we're accessible to colour blind people                      :ui:
** Means a terminal mode
** Make sure the cursor always stays at the player character's position
* Use a config file                                                    :code:
** The game's configuration will be portable and relatively easy to modify
** We could use libtcod's config
*** http://doryen.eptalys.net/data/libtcod/doc/1.5.1/html2/parser_run.html?c=true
*** not portable if we ever switch to other backengs (like glium)
**** which we did
** Probably something like TOML instead
*** Has a solid Rust implementation (because Cargo)
*** Supports comments
*** Fairly easy to read & edit
*** Can we update it while preserving comments?
** Examples:
*** font path
*** font size
*** fullscreen (yes/no)
*** key bindings
*** colour-blind mode (yes/no)
*** location to the replays
*** location to the saved games?
* Notes on screen casts/recording
** Use Kazam
** Make sure the FPS are set to 60
** It makes smooth clean .mp4 videos with no warnings from MPV during playback
* Archive                                                           :ARCHIVE:
** DONE Taking a dose must always save from Depression
CLOSED: [2016-10-07 Fri 21:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 21:25
:END:
** DONE Eating food must always save from Derpession
CLOSED: [2016-10-07 Fri 21:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 21:25
:END:
** DONE Background around a dose should glow in the Irresistible radius
CLOSED: [2016-10-07 Fri 22:18]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-07 Fri 22:18
:END:
** DONE Remove the duplicate irresistible radius formula calculation
CLOSED: [2016-10-08 Sat 13:10]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 13:10
:END:
** DONE Remove the duplicate coordinates projection calculation in irresistible dose
CLOSED: [2016-10-08 Sat 13:22]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 13:22
:END:
** DONE CRASH when going somewhere left
CLOSED: [2016-10-08 Sat 14:29]
:PROPERTIES:
:ARCHIVE_TIME: 2016-10-08 Sat 14:29
:END:
cargo run -- replay-2016-10-08T13\:20\:21.431
** DONE Finer indicator of the state of mind
CLOSED: [2016-12-05 Mon 22:25]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-05 Mon 22:25
:END:
*** let's split the three states (high, sober, withdrawal)
*** have a progress bar for each
*** you replenish high by doses, when it drops to zero -> withdrawal
*** you replenish sober & withdrawal with food
*** normal going to zero -> withdrawal
*** withdrawal going to zero -> death
*** withdrawal going up -> sober
** DONE UI: make the sidebar a different colour so it's visually distinct
CLOSED: [2016-12-05 Mon 23:32]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-05 Mon 23:32
:END:
** DONE BUG: Crash on overdose
CLOSED: [2016-12-06 Tue 00:27]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-06 Tue 00:27
:END:
** DONE BUG: The screen doesn't move when going to the right edge
CLOSED: [2016-12-08 Thu 20:31]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-08 Thu 20:31
:END:
*** And but the world there still exist, so a Depression can kill you without you seeing it coming
** DONE The FOV circle should never extend beyond the edge of the screen
CLOSED: [2016-12-08 Thu 20:31]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-08 Thu 20:32
:END:
*** I.e. the player should always be able to see the full extent of their field of view
*** Which means we should trigger the screen scroll before that happens
*** And to make things predictable, let's scroll precisely when the field of view would be outside
*** That way the player can learn & anticipate it instead of being surprised
** DONE A high-enough Will will let you pick up & carry doses in your inventory
CLOSED: [2016-12-09 Fri 00:20]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-09 Fri 00:20
:END:
*** DONE Differentiate between normal and strong doses
CLOSED: [2016-12-08 Thu 23:53]
*** DONE But if it drops below that limit and you're carrying, you'll automatically consume a dose every turn, which will likely kill you.
CLOSED: [2016-12-09 Fri 00:20]
** DONE Victory condition: cure addiction
CLOSED: [2016-12-09 Fri 21:53]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-09 Fri 21:53
:END:
*** Do *something* that will cure the addiction somehow
*** Read up on curing addiction and see if there's any inspication
*** how about reaching max will & spending certain amount of time being sober?
**** when you reach max Will, we'll show a progress bar towards victory
**** going to Withdrawal or High will reset the bar
** DONE BUG: Large doses have no irresistible area
CLOSED: [2016-12-11 Sun 17:36]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 17:37
:END:
** Reduce the max Will to 5
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 21:18
:END:
*** We'll have to re-balance everything ultimately anyway
*** But given the content in the game right now, 5 is much more likely to get you anywhere
** DONE Slightly increase the normal dose frequency?
CLOSED: [2016-12-11 Sun 21:19]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-11 Sun 21:19
:END:
*** We'll have to re-balance everything ultimately anyway
*** But maybe having more doses would be a nice way to prevent early deaths and show tolerance increase
** DONE tcod-rs wrong asserts in console::root::rect
CLOSED: [2016-12-12 Mon 23:04]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-12 Mon 23:04
:END:
*** Unable to fill the last column and row because of an incorrect assert
*** Log a github issue
*** DONE Fix upstream
CLOSED: [2016-12-12 Mon 23:04]
*** DONE Remove the dimensions - (1, 1) workaround in engine.rs
CLOSED: [2016-12-12 Mon 23:04]
** DONE tcod-rs missing get_default_background color:
CLOSED: [2016-12-12 Mon 23:04]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-12 Mon 23:04
:END:
*** Log a github issue
*** DONE Fix upstream
CLOSED: [2016-12-12 Mon 23:04]
*** DONE Remove the tcod_sys unsafe workaround in engine.rs
CLOSED: [2016-12-12 Mon 23:04]
** DONE BUG: Hunger is harmless while High
CLOSED: [2016-12-13 Tue 16:34]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-13 Tue 16:34
:END:
** DONE Code improvement: helper functions to RangedInt
CLOSED: [2016-12-13 Tue 19:01]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-13 Tue 19:01
:END:
*** is_max(&self) -> bool
*** set_to_min(&mut self)
*** set_to_max(&mut self) -- are we actually using this one??
** DONE End-goal
CLOSED: [2016-12-14 Wed 13:48]
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-14 Wed 13:48
:END:
*** We've implemented a victory condition now and have a few more fleshed out -- closing this
*** Play until you die is fun while testing but we should have something to achieve
*** Something along the lines of 12 steps?
**** though I'm not fond of those
**** but like some discrete steps/things to find
**** multiple endings? Fixing your addiction being the hardest one.
** Overdose doesn't seem to be having any effect                       :bug:
:PROPERTIES:
:ARCHIVE_TIME: 2016-12-30 Fri 19:00
:END:
*** When debugging, `player.alive()` is clearly false on overdose
*** But the GUI nor the game seem to pick up on it
** DONE Handle the monsters issue                                     :code:
CLOSED: [2017-01-06 Fri 22:24]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-06 Fri 22:24
:END:
Before the new World order, all the monsters were held in a single Vec
that was separate from the level, but the Level had a map of Position
-> Monster ID.

That way, we could mutably iterate over the monsters for their AI
routines while being able to look at the surrounding area including
monsters that would block movement/pathfinding, etc.

Right now, the monsters are stored within each World Chunk though.

That means to iterate over the monsters, we need to borrow the whole
World mutably, which precludes looking at the level or surrounding
chunks.

Requirement:

1. A monster sees the player nearby in another chunk
2. It finds a path (not trampling over other monsters) towards the player
3. It walks the path step by step
4. It hits the player
5. After the attack, it disappears


Rough code outline:

For each monster visible area + 10 tiles:
    - run monster AI:
      - check distance to player
      - howl
      - find path towards the player
    - do the action AI decided (walk, attack, wait)
      (needs to happen before we process the next monster)
      (may involve moving to another chunk)

- We want to chunkify the monsters and items and everything else, too


let monster_positions = world.monster_positions_within_area(left_top - 10, bottom_right + 10).collect();
for pos in monster_positions {
    let (ai, action) = {
        let monster = world.monster_on_pos(pos).clone();  // NOTE: this frees the world borrow
        monster.act(player_pos, world, rng)  // NOTE: this is read-only action so the clone is all right
    };

    // TODO: assign the AI state here!
    // TODO: process the action here!
}


Potential solutions:

1. Iterate internally, process monsters with a callback

We do this for the rendering currently.

2. Process monsters immutably, return a list of actions to be performed later.

This is the general idea in gamedev, but would the fact that the world
needs to be mutable interfere here?

Also, one monster's movement can block another one following it. So we
should probably process the monsters one by one.

3. Analogous to what we do now: keep monsters separately, update the
   world when their position changes

This will require making the Monsters vector availeble to World for
writing or for the chunks to be created explicitly (so we can add the
newly-generated monsters to the main Vec).
** DONE The Depression only moves by one space                         :bug:
CLOSED: [2017-01-06 Fri 22:43]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-06 Fri 22:43
:END:
** DONE The intoxication animation is no longer visible                :bug:
CLOSED: [2017-01-07 Sat 23:16]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-07 Sat 23:16
:END:
** DONE The initial player's area is no longer safer + food and doses  :bug:
CLOSED: [2017-01-09 Mon 19:58]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-09 Mon 19:58
:END:
** DONE CRASH                                                          :bug:
CLOSED: [2017-01-09 Mon 20:15]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-09 Mon 20:15
:END:
*** cargo run -- replays/replay-2017-01-09T20-08-08.261
*** 'Monster should exist on this position'
** DONE Make the map "infinitely large"                          :code:idea:
CLOSED: [2017-01-12 Thu 11:20]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-12 Thu 11:20
:END:
*** We have an artificial limit on the map size now
*** Basically because of performance issues
*** I've frequently bumped into the end of the map
*** So let's fix the performance and make the map big enough size
** DONE Intoxication animation should not be visible on death          :bug:
CLOSED: [2017-01-12 Thu 17:28]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-12 Thu 17:29
:END:
** DONE Add vi-keys                                                :feature:
CLOSED: [2017-01-17 Tue 00:01]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-17 Tue 00:01
:END:
*** h/j/k/l mean left/down/up/right
*** y/u mean top-left/top-right
*** n/m mean bottom-left/bottom-right
** DONE The game hangs in some circumstances for some reason           :bug:
CLOSED: [2017-01-19 Thu 21:57]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-19 Thu 21:57
:END:
*** replay: BUG-hang.txt
*** not sure why yet, but when it runs, it needs to be `kill -9`d
*** When the path to the target is blocked, the algorithm tries to explore the entire world.
*** Fixed by setting an upper limit to the amount of calculations it does.
** DONE Add fullscreen on pressing Alt + Enter                     :ui:code:
CLOSED: [2017-01-28 So 15:55]
:PROPERTIES:
:ARCHIVE_TIME: 2017-01-28 So 15:55
:END:
*** We used to have it but had to disable it during the multiple backends work
*** How do we set it? It's not a draw call per se
*** Maybe have another vec for "engine commands"? What else would we do there though?
** DONE The colours in the glium backend look washed compared to tcod/piston :bug:
CLOSED: [2017-02-01 St 08:46]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-01 St 08:46
:END:
** DONE Fade and Rectangle are not implemented for the glium backend   :bug:
CLOSED: [2017-02-01 St 21:02]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-01 St 21:02
:END:
** DONE Compile the rendering backends conditionally                  :code:
CLOSED: [2017-02-02 Čt 18:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-02 Čt 18:41
:END:
*** Use cargo features to select which backends (tcod, rustbox, glium, piston) to even compile
*** Would make things easier for clone/cargo run and distribution
*** Glium is going to be the default
*** In the end, I'll probably ditch everything else, but it'll be useful for comparison for now
** DONE The glium backend blends dots (empty space) with whatever else is there :bug:
CLOSED: [2017-02-03 Pá 16:30]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-03 Pá 16:30
:END:
** DONE The glium backend doesn't pass FPS to the update function      :bug:
CLOSED: [2017-02-04 So 18:18]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 18:19
:END:
** DONE The SoM bar is no longer visible                               :bug:
CLOSED: [2017-02-04 So 18:54]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 18:54
:END:
*** Did we miss that with the latest reordering?
** DONE The explosion animation shows lower area than it actually has  :bug:
CLOSED: [2017-02-04 So 20:11]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-04 So 20:11
:END:
** DONE Improve the statistics we gather                              :code:
CLOSED: [2017-02-05 Ne 16:20]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-05 Ne 16:20
:END:
*** DONE option to replay at full speed (so we don't get the idle stats)
CLOSED: [2017-02-05 Ne 16:20]
*** DONE calculate & display mean and average durations
CLOSED: [2017-02-05 Ne 15:26]
*** DONE keep track of wider variety of the worst time offenders
CLOSED: [2017-02-05 Ne 15:26]
** DONE Replays are sometimes broken                                   :bug:
CLOSED: [2017-02-06 Po 21:12]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-06 Po 21:12
:END:
*** I don't know why but sometimes the replay functionality is broken
*** so the playback behaves differently from the original play
** DONE The monster's path is recalculated every turn                  :bug:
CLOSED: [2017-02-07 Út 19:39]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-07 Út 19:39
:END:
*** With the path visualisation, it's clearly visible now
*** Every turn, the monster choses a random path and recalculates
*** Thus, making their movement basically equally random as before only much slower ffs
** DONE Depression sometimes doesn't follow the player                 :bug:
CLOSED: [2017-02-07 Út 20:29]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-07 Út 20:29
:END:
*** Sometimes I see it (and it should see me) and it just stands there
*** I'm guessing it's something to do with the world chunks
**** Could be pathfinding, too but I don't remember it being a problem before the chunks
*** Actually, it looks like it's just the depression moving there and back
*** And we see it because the visibility limit can be greater
*** So really, the monsters should all just set a more distant target and follow it
*** Instead of moving randomly
** DONE High score for the number of doses collected                  :idea:
CLOSED: [2017-02-08 St 16:19]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:23
:END:
*** Would be a cool incentive for the end game
*** The players might even consider prolonging it
*** While obviously carrying danger because of the loss of Will and Depressions
** DONE Track the continuous High                                     :idea:
CLOSED: [2017-02-08 St 16:19]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:23
:END:
*** think of something that would make the player want to not break the cycle
*** Show at the end of the game screen
** Random chance that explosion destroys a wall, too?
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:28
:END:
*** I think this is superseded by the horizontal/diagonal ray doses
** Ghost-like NPC becoming corporeal                                  :idea:
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:29
:END:
*** When being High, the player would see these ghost NPCs moving through the world
*** When being sober, they'd become more and more corporeal
*** Could point the player towards interesting places/end-game conditions, etc.
** Limited map size that the player has to explore [map alternative]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:30
:END:
*** spanning multiple screens
*** but not infinite
*** we'd have some sort of goal to find/accomplish there
*** that would simplify our entity handling and mapgen
*** The screen would be a view into that map
**** still need to figure out how to move inbetween screens
** DONE Idle monsters select more distant destinations                :idea:
CLOSED: [2017-02-08 St 16:30]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:30
:END:
*** This should make it seem more realistic
*** No longer just moving randomly back and forth
** improve level generator not to create blocked entities
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:30
:END:
*** Actually, with the wall-destroying ray-based doses, we can just keep it in
*** The player would look for means of destroying the wall if it had food/dose/anxiety in
** DONE Better effects on player's death                                :ui:
CLOSED: [2017-02-08 St 16:32]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:32
:END:
*** Fade out to red/black completely
*** Uncover the entire map (with a reverse fade)
**** with full colours
**** showing player's corpse
** DONE Maybe have a notion of a Timer struct?                        :code:
CLOSED: [2017-02-08 St 16:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:41
:END:
*** first pass just set the time and drop to zero.
*** no need to store (maximum, elapsed) Durations then
** The "High" animation just kills the framerate on uncovered screen  :code:
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 16:41
:END:
** DONE Add a new type of dose with different effects                 :idea:
CLOSED: [2017-02-08 St 21:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-08 St 21:41
:END:
*** it would show as a different letter
*** with a different colour (red?)
*** it's own tolerance
*** different effect on consumption (not explosion)
**** how about shooting rays in cardinal / diagonal directions?
**** could be two versions of the "same type" just like normal/strong dose now
**** the rays would destroy everything in their path -- including walls
**** the characters would be `+` and `x` for cardinal and diagonal rays
*** Implemented the `+` dose, adding the other one as a separate item
** DONE Add a Diagonal Shattering Dose                                :idea:
CLOSED: [2017-02-16 Čt 17:02]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-16 Čt 17:03
:END:
*** Similar to the CardinalDose its explosion destroys everything in its path
*** But the explosion moves in the diagonal lines
** DONE Make the shattering doses' irresistible area different        :idea:
CLOSED: [2017-02-16 Čt 19:27]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-16 Čt 19:27
:END:
*** They have basically the same area as the small doses right now
*** It would be really neat if they were something inbetween
** DONE Create a 1-tile radius of monster killing AoE for shattering doses
CLOSED: [2017-02-16 Čt 22:38]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-16 Čt 22:38
:END:
*** basically like with food/normal doses but only 1 tile around the dose
*** That means that the immediate vicinity of the dose is always protected
*** but the main effect is still the cardinal/diagonal tendrils of shattering
** DONE Show stats only while cheating                                  :ui:
CLOSED: [2017-02-23 Thu 18:11]
:PROPERTIES:
:ARCHIVE_TIME: 2017-02-23 Thu 18:12
:END:
*** that means the FPS, dt and the recent frame durations
*** useful for when we're recording things
*** eventually we may want to have stats and cheating as separate things, but this will do for now
** DONE Make a new release
CLOSED: [2017-03-12 Sun 15:47]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-12 Sun 15:47
:END:
*** DONE verify the muslbuilds
CLOSED: [2017-02-25 Sat 13:19]
**** broken -- the glium window doesn't seem to work?
*** DONE verify the windows builds
CLOSED: [2017-02-25 Sat 13:19]
*** DONE verify the linux builds
CLOSED: [2017-02-25 Sat 13:25]
*** DONE ask Martin about the windows builds
CLOSED: [2017-02-26 Sun 09:49]
**** minwg fine
**** msvc nope
*** DONE remove the "fonts" folder from the ci build  systems
CLOSED: [2017-02-25 Sat 13:25]
*** DONE kick-off build 0.4.0 (with the font/image fix)
CLOSED: [2017-02-25 Sat 13:25]
*** DONE write release notes
CLOSED: [2017-02-26 Sun 10:45]
*** record a let's play
*** DONE publish on the website & blog
CLOSED: [2017-02-27 Mon 20:29]
** DONE Test the OSX build
CLOSED: [2017-03-12 Sun 15:47]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-12 Sun 15:47
:END:
*** rope someone into trying it out:
**** does it crash?
**** does it respond to keyboard events?
**** do the animations run smoothly?
**** does it show a separate console window like the Windows build?
*** alternatively: buy a mac /o\
*** Honza said it worked fine. Thanks, Honza!
** DONE Shattering doses don't appear in the inventory              :bug:ui:
CLOSED: [2017-03-12 Sun 18:35]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-12 Sun 18:35
:END:
*** Make sure that every new item forces us to handle the inventory list
** DONE Carrying small doses in inventory should be possible earlier than the large ones :idea:
CLOSED: [2017-03-12 Sun 20:52]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-12 Sun 20:52
:END:
*** Right now they're all only pickable at the highest Will
** DONE Show main keyboard controls                                     :ui:
CLOSED: [2017-03-14 Tue 20:08]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-14 Tue 20:08
:END:
*** Similar to Braid though I don't think we can be as subtle with it
*** Show a little square for each key that does a movement
*** In the 8 movement directions, close to the window screen
** DONE Verify we've used all commands in the replay log
CLOSED: [2017-03-19 Sun 12:52]
:PROPERTIES:
:ARCHIVE_TIME: 2017-03-19 Sun 12:52
:END:
*** See log replay-2017-03-19T12-09-42.307
*** It ends way to soon
** DONE Verify the monster positions in the replay log
CLOSED: [2017-04-09 Sun 12:34]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-09 Sun 12:35
:END:
*** See log replay-2017-03-19T12-09-42.307
*** It ends way to soon
*** We've added monster verification to the replay
** DONE Replay de-sync again                                           :bug:
CLOSED: [2017-04-09 Sun 12:34]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-09 Sun 12:35
:END:
*** replay-2017-03-15T08-45-06.733
*** write a "fuzzer" for replay synchronisation issues
*** now's a good time because we clearly have a bug
*** ideally, the fuzzer should just generate random inputs without much thought
*** so let's add an invincibility mode so we can just keep going
*** `make fuzz`
**** generate an inputs file
***** needs random human-like delays!
**** run the replay
**** check the return code
**** log whether replay succeeded or failed
*** we'll need to have a way to drive the first playthrough
**** can't generate the replay log directly because it has the verification code
*** consider an option to specify the replay path
**** would probably make the runner easier
*** consider writing a headless mode
**** we have the pluggable renderer stuff in, this should just be no-op
**** means we can run it on a server
**** or in the background
**** or multiple runs in parallel
*** consider a setting for custom replay speed
**** instead of `--replay-at-full-speed` we'd specify a value in secs
**** we could re-run the replay at multiple speeds to check
*** It was the chunks and monster processing depending on the screen
**** All game logic should be display-independent now
** DONE Disable the validations in the release build                  :code:
CLOSED: [2017-04-09 Sun 13:44]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-09 Sun 13:44
:END:
*** they're taking too much space
** DONE There seems to be an edge to the world                         :bug:
CLOSED: [2017-04-10 Mon 13:24]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-10 Mon 13:24
:END:
*** When I played the game, the right-hand side didn't seem to generate new chunks
** DONE Victory doesn't stop the gameplay & show the end game screen   :bug:
CLOSED: [2017-04-10 Mon 20:17]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-10 Mon 20:17
:END:
*** Oh and actually, we should display the Victory screen just like the game over one
*** with the score and everything
*** But it seems to work fine during the replay
** DONE Make sure doses' Mind effect doesn't eat into the withdrawn/sober counter
CLOSED: [2017-04-16 Sun 20:37]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-16 Sun 20:38
:END:
I have a sneaking suspicion that taking a dose while withdrawn/sober
will actually use it's intoxication value to go over the non-high
counters.

This doesn't make that much sense and it means that the player is able
to use the shattering doses earlier than they should.

In addition, we should make sure that the shattering doses can't be
consumable at the beginning of the game.
** DONE Make game procesing turn-dependent, not realtime              :code:
CLOSED: [2017-04-17 Mon 19:11]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-17 Mon 19:11
:END:
*** The replay desync showed us that the processing and rendering are all over the place
*** We need to separate the state modification to when a player did something
*** And rendering which should be completely immutable
*** I guess it's time for the split of the `update` function
** DONE Replace the _MIN/_MAX values with a range                     :code:
CLOSED: [2017-04-18 Tue 13:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-18 Tue 13:41
:END:
*** Problem: std::ops::Range is non-copy so we can't really use it in constants
*** But we could create `struct InclusiveRange(u32, u32)` + Into<Range>
*** And have RangeInt take Into<Range>
*** If/when the inclusive range gets stabilised + Copy we can use `min...max`
** DONE Move all game formulas and numbers to the `formula` module    :code:
CLOSED: [2017-04-18 Tue 13:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-18 Tue 13:41
:END:
** DONE Display next actions in the game over menu                      :ui:
CLOSED: [2017-04-19 Wed 10:50]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-19 Wed 10:50
:END:
*** "Press [F5] to start a new game"
*** "Press [Q] to quit"
** DONE The Hunger no longer howls to attract nearby hungers           :bug:
CLOSED: [2017-04-21 Fri 17:46]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-21 Fri 17:46
:END:
*** I like that feature and it's disappearance is an omission
*** If we do want to remove it, it should be after testing
** DONE Add no-op NPCs provisionally?
CLOSED: [2017-04-21 Fri 19:48]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-21 Fri 19:48
:END:
*** I don't have a solid gameplay system yet but I'd like to add them in
*** We need to support more than one AI for this (NPCs are not hostile)
*** Maybe rename "monster" to "mob" or "npc" everywhere?
** DONE Make the beginnings easier instead of throwing everything at you all at once :idea:
CLOSED: [2017-04-23 Sun 11:15]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 11:15
:END:
*** Start with a handful subset of monsters, maybe less spaced-out
*** Have "easy" and "hard" areas on the map but start in an easy one
** DONE The player can start surrounded by hunger monsters and dead :mapgen:bug:
CLOSED: [2017-04-23 Sun 11:14]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 11:15
:END:
** DONE The player can start within an irresistible dose's reach :mapgen:bug:
CLOSED: [2017-04-23 Sun 12:40]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 12:41
:END:
** DONE The map generation shouldn't screw you over from the beginning :mapgen:bug:
CLOSED: [2017-04-23 Sun 12:40]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 12:41
:END:
** DONE Give the Shattering Doses a secondary "blue destruction" area :idea:
CLOSED: [2017-04-23 Sun 12:55]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 12:56
:END:
*** So their red beams shatter everything they touch
*** But how about we give additional area that only destroys monsters like the normal doses
**** it could be say the immediate tiles next to the explosion centre (i.e. radius 1)
**** or like secondary beams next to the primary red ones
**** or both?
** DONE Remove the `build` folder from the releases                    :bug:
CLOSED: [2017-04-23 Sun 12:56]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 12:56
:END:
*** Takes up a lot of space and it's entirely unnecessary
** DONE Map the "must go forward and use the dose" range directly to Will? :idea:
CLOSED: [2017-04-23 Sun 12:57]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-23 Sun 12:57
:END:
*** It could make the place more interesting -- having move around the place
*** Needs glowing irresistible areas
*** It would make it clearer what happens when you gain new will
** DONE Look at using the struct shorthand syntax                     :code:
CLOSED: [2017-04-28 Fri 09:46]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-28 Fri 09:46
:END:
*** new in Rust 1.17
*** lets you use `Point {x, y}` instead of `Point {x: x, y: y}`
*** QUESTION: can it work on partial values? E.g. `Point {x, y: 5}` ??
** DONE Show the reason for the player's death/victory on the score screen :ui:
CLOSED: [2017-04-28 Fri 16:48]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-28 Fri 16:48
:END:
*** Why did they die? Depression? Exhaustion? No Will? Overdose?
** DONE Don't show the console on Windows                               :ui:
CLOSED: [2017-04-29 Sat 10:53]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-29 Sat 10:53
:END:
*** When run in the GUI mode (the default) we should not show the console window
*** looks like we need to pass `-mwindow` to GCC
*** https://users.rust-lang.org/t/solved-rust-project-how-build-like-gcc-mwindow/5168
*** Created a commit that should do it
**** The build passed but it's not been tested yet
** DONE Release 0.4.3
CLOSED: [2017-04-30 Sun 17:58]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-30 Sun 17:58
:END:
*** Test the Windows build -- is the console window gone?
*** Create a screenshot
*** Add the screenshot to the github release
*** Update the aimlesslygoingforward project page
*** Write a blog post
** DONE Different screen fadeout colours on various player deaths       :ui:
CLOSED: [2017-04-30 Sun 22:47]
:PROPERTIES:
:ARCHIVE_TIME: 2017-04-30 Sun 22:47
:END:
*** RED when killed by a monster
*** BLACK when died of exaustion
*** WHITE (slow fade, plus glitches) when overdosed
** DONE NPCs are able to be on the same tile as the player             :bug:
CLOSED: [2017-06-08 Thu 21:00]
:PROPERTIES:
:ARCHIVE_TIME: 2017-06-08 Thu 21:00
:END:
** DONE Change NPC speed by Intoxication                              :idea:
CLOSED: [2017-06-17 Sat 14:18]
:PROPERTIES:
:ARCHIVE_TIME: 2017-06-17 Sat 14:18
:END:
*** They have 2 APs when High
*** They have player's `max_aps` when Sober/Withdrawn
** DONE Switch to `impl Iterator`                                     :code:
CLOSED: [2017-07-07 Fri 19:15]
:PROPERTIES:
:ARCHIVE_TIME: 2017-07-07 Fri 19:15
:END:
*** This will set us simplify the world iteration code so much
*** Example from the Rust playpen that works on nightly:
#+BEGIN_SRC Rust
#![feature(conservative_impl_trait)]

#[derive(Clone, Debug)]
struct Cell {
    num: i32,
}

#[derive(Debug)]
struct Chunk {
    cells: Vec<Cell>,
}

#[derive(Debug)]
struct World {
    chunks: Vec<Chunk>,
}

impl World {
    fn cells<'a>(&'a self) -> impl Iterator<Item=(usize, &'a Cell)> {
        self.chunks.iter().flat_map(|chunk| chunk.cells.iter()).enumerate()
    }

    fn cells_mut<'a>(&'a mut self) -> impl Iterator<Item=(usize, &'a mut Cell)> {
        self.chunks.iter_mut().flat_map(|chunk| chunk.cells.iter_mut()).enumerate()
    }

}


fn main() {
    let mut world = World {
        chunks: vec![
            Chunk{ cells: vec![Cell{num: 1}, Cell{num: 2}, Cell{num: 3}]},
            Chunk{ cells: vec![Cell{num: 21}, Cell{num: 22}, Cell{num: 23}]},
            Chunk{ cells: vec![Cell{num: 31}, Cell{num: 32}, Cell{num: 33}]},
        ]
    };

    for (id, cell) in world.cells_mut() {
        if id % 3 == 0 {
            cell.num = 255;
        }
    }

    let cells = world.cells().collect::<Vec<_>>();
    println!("Cells: {:?}", cells);
}
#+END_SRC
** DONE Allow setting invincibility while the game is running         :code:
CLOSED: [2017-10-04 Wed 22:12]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-04 Wed 22:12
:END:
*** From the Cheat mode
*** That would simplify our testing
** DONE Show current bonus in the sidebar                               :ui:
CLOSED: [2017-10-04 Wed 22:19]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-04 Wed 22:19
:END:
** DONE Add different kinds of NPCs                                   :idea:
CLOSED: [2017-10-04 Wed 22:20]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-04 Wed 22:20
:END:
*** Red/Blue/Brown (same colours as monsters)
** DONE Right-click on monster to show its info                         :ui:
CLOSED: [2017-10-06 Fri 21:06]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-06 Fri 21:06
:END:
** DONE Show the current anxiety counter in the sidebar                 :ui:
CLOSED: [2017-10-06 Fri 21:08]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-06 Fri 21:08
:END:
*** or when you right-click on player
** DONE Give player a bonus when bumping into an NPC                  :idea:
CLOSED: [2017-10-06 Fri 21:57]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-06 Fri 21:57
:END:
*** DONE Red: double anxiety counter gain on killing `a`
CLOSED: [2017-10-04 Wed 20:55]
*** DONE Blue: give 2 APs
CLOSED: [2017-07-21 Fri 17:54]
*** DONE Brown: slow down the sober/withdrawal fall by half
CLOSED: [2017-10-06 Fri 21:57]
**** Question: does it do that for Hungers as well?
** DONE Increase the irresistibility radius by one                  :design:
CLOSED: [2017-10-07 Sat 11:13]
:PROPERTIES:
:ARCHIVE_TIME: 2017-10-07 Sat 11:13
:END:
*** That will make the game possibly more interesting
*** but more importantly, it'll make sure that the first Will bump has a visible effect
** DONE Implement Fullscreen for the Opengl backend                     :ui:
CLOSED: [2017-12-09 Sat 12:35]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-09 Sat 12:35
:END:
*** example: https://github.com/glium/glium/blob/master/examples/fullscreen.rs#L107
*** seems to be fixed in Glutin 0.11.0 at least
**** hm so we can run the 0.11 glutin fullscreen example
**** but not the glium one. That still crashes
**** dunno what's up with that
*** NOTE: this is not implemented in Glutin 0.7 which Glium uses internally
*** AFAICT you can't just replace that glutin with 0.8 which presumably does this
**** doesn't seem so? https://github.com/tomaka/glutin/blob/cff7a88d051c972e2b78957443bef5e45149c18a/src/platform/linux/x11.rs#L150
*** Seems to be a Linux-only issue
*** Could we just recreate the window instead of calling rebuild?
**** Might be a decent workaround
**** Getting glium runtime errors and the second window is not disappearing
**** Seems kind of complicated
*** Might also have to move to SDL2 because of this
*** Also: Test this work in multi-monitor setups
**** Make sure we're able to detect the "current monitor" to do this with
** DONE The NPC Bonus is awarded even when High                        :bug:
CLOSED: [2017-12-09 Sat 17:05]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-09 Sat 17:05
:END:
*** Sometimes you just luck out and catch up with a NPC even when high
*** no bonus should appear when you do that
** DONE NPC leaves the player when High                               :idea:
CLOSED: [2017-12-12 Tue 12:42]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-12 Tue 12:42
:END:
*** The current bonus is lost
** DONE The NPC bonus disappears when the NPC leaves the simulation area :bug:design:
CLOSED: [2017-12-14 Thu 11:59]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-14 Thu 11:59
:END:
This is a bit of an unclear behaviour. We could and probably should
fix it, but realistically, the NPC should probably accompany the
player on their journey.

So once that's implemented, the NPC will always be in the simulation
area. So I'm not sure it's a bug we actually want to fix necessarily.
** NPC gets targeted by monsters when accompanying player             :idea:
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-14 Thu 11:59
:END:
*** They have 2 HP
*** HPs reset when they leave the player
*** The NPC becomes grey and leaves the player for 20 turns on "death"
*** nope, not going to do this
** DONE Handle resized window                                           :ui:
CLOSED: [2017-12-15 Fri 14:22]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-15 Fri 14:22
:END:
*** When we resize a window now, everything just gets squished
*** The game should always maintain the correct aspect ratio
**** We can just letterbox it for now
**** Later, switch fonts dynamically based on the size
** DONE Replace the `time` crate                                      :code:
CLOSED: [2017-12-29 Fri 11:04]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-29 Fri 11:04
:END:
*** Time is now deprecated
**** https://github.com/rust-lang-deprecated/time
*** The readme points to `chrono`
*** But maybe we could just go back to `std::time`? That's at least stable
** DONE Nearby NPC should stay within player's distance when sober    :idea:
CLOSED: [2017-12-29 Fri 21:28]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-29 Fri 21:28
:END:
*** It's really hard to catch them even when sober right now
*** When sober maybe they should just stay on one spot or not move that much
*** It would be good if we could halve their normal speed
**** So they only move once every 2 turns say
**** But we'd have to be careful how to implement this
***** Floats will get precision loss and can skip a beat
***** Ints are a little unwieldy (but we do that for halving the hunger anyway)
***** We could try to bring in the `num` crate and its `num::rational::Ratio<i32>`
***** We're using it for `Range` now so sure
** DONE interactive NPCs                                            :design:
CLOSED: [2017-12-29 Fri 22:03]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-29 Fri 22:03
:END:
*** When High, you can't interact with them
**** they're translucent
**** move twice as fast as you
*** When Withdrawn/Sober they can be interacted with
**** they have a colour (based on their bonus)
**** they only move 1 HP
**** you can bump into them
*** Bumping into an interactive NPC
**** Gives the backrgound the same glow as their colour
**** They give you a bonus based on their colour
**** Monsters start targetting them
**** They have 2 HPs
*** They disappear when killed by a monster
*** They become translucent when the player gets high again
*** The player loses the bonus when the NPC dies or leaves
*** Question: can you "activate" more than one NPC?
**** does the same bonus stack?
**** do different bonuses combine?
*** The bonus would be written in the sidebar
*** NPC bonuses:
**** a red NPC would double the anxiety counter on each `a` killed
**** blue NPC would give the player 2 action points (like depression)
**** brown NPC would reduce the sober & withdrawal curves
** DONE Dismiss the "you diead" screen when pressing Spacebar           :ui:
CLOSED: [2017-12-29 Fri 22:41]
:PROPERTIES:
:ARCHIVE_TIME: 2017-12-29 Fri 22:41
:END:
*** So the player can see the full map
*** cycle the map and game over screen by pressing the key
** DONE Write out tips on death                                       :idea:
CLOSED: [2018-01-05 Fri 11:55]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-05 Fri 11:55
:END:
*** On early overdose, mention that second dose while High is dangerous
"Using another dose when High will likely cause overdose early on."
*** On being killed by `a`, mention they take out will and you die at 0
"Being hit by `a` reduces your Will. You lose when it reaches zero."
*** On being killed by hunger, mention they're deadly on withdrawal
"Being hit by `h` will quickly get you into a withdrawal."
*** On `D` mention they're fast and deadly
*** More advanced tips:
**** detect when being swarmed by hunger
**** detect being drawn to an irresistible dose
**** detect being confused or stunned
*** More general tips
**** can't interact with npcs when you're high
** DONE Remove the requirement on Visual C++ Runtime on msvc          :code:
CLOSED: [2018-01-05 Fri 17:04]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-05 Fri 17:05
:END:
*** https://www.reddit.com/r/rust/comments/7mif9i/how_to_compile_binaries_without_dependencies_on/druuu2n/
*** https://news.ycombinator.com/item?id=15197424
*** Try to link with MSVCRT.DLL
*** Add this to Dose Response's root directory:
#+BEGIN_SRC
[target.x86_64-pc-windows-msvc]
rustflags = ["-Ctarget-feature=+crt-static"]
[target.i686-pc-windows-msvc]
rustflags = ["-Ctarget-feature=+crt-static"]
#+END_SRC
** DONE Vi keys are not correct                                        :bug:
CLOSED: [2018-01-11 Thu 09:57]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-11 Thu 09:57
:END:
*** https://github.com/tomassedovic/dose-response/issues/3
*** We use `n` & `m` instead of `b` & `n`.
** DONE Create a Help screen                                            :ui:
CLOSED: [2018-01-12 Fri 23:54]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-12 Fri 23:55
:END:
*** Opens any time by pressing `?`
*** Shows movement keys
**** We need to be able to render the arrow characters
**** Try & test this on wasm first?
***** though that only handles ASCII doesn't it?
**** https://www.toptal.com/designers/htmlarrows/assets/images/htmlarrows-hero-529437ad.jpg
**** Here's a code that prints tehm out it rust
#+BEGIN_SRC
let chars = [
    '\u{2190}',
    '\u{2191}',
    '\u{2192}',
    '\u{2193}',

    '\u{2196}',
    '\u{2197}',
    '\u{2198}',
    '\u{2199}',
];

for chr in &chars {
    println!("{}, {}", chr, *chr as u32);
}
#+END_SRC
***** Outputs:
←, 8592
↑, 8593
→, 8594
↓, 8595
↖, 8598
↗, 8599
↘, 8600
↙, 8601
***** The `\u{}` sequence expects hexadecimal numbers
*** Shows basic tips
**** use doses
**** carry food
**** don't pick up doses unless sober at first
** DONE Add the `?` hint for help to the endgame screen                 :ui:
CLOSED: [2018-01-12 Fri 23:57]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-12 Fri 23:57
:END:
** DONE Readable text in wasm                                           :ui:
CLOSED: [2018-01-25 Thu 13:05]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-25 Thu 13:05
:END:
*** Need to actually differentiate between the structs we send out
*** Consider proper serialization library instead of rolling my own
*** e.g. MessagePack:
**** Has a Serde backend
**** And JS: https://www.npmjs.com/package/msgpack-lite
**** Question: does it support stream reading?
***** If not, do we actually care?
***** It would basically double the memory reqs otherwise
*** Or Capn Proto?
*** Or Protobuf?
*** TODO Ok it works, but (as expected) the text positioning and wrapping is wrong
**** Because the fonts are now narrower than the game expects
**** So we need to add wrapping and alignment to the drawcalls
**** WRITE THE USAGE CODE FIRST
** DONE Readable text in glium                                          :ui:
CLOSED: [2018-01-28 Sun 11:25]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-28 Sun 11:25
:END:
*** We should not align the characters to square grid for text
*** It's just really hard to read
*** Ideally, we'd get full support for variable-width text
*** But a simpler solution
**** Separate bitmap for the fixed width font
**** And then improve by using that bitmap the square grid, too
**** And leave properly kerned variable width to other games
**** We don't want to be using different fonts anyway
** DONE Center the generated font bitmap                                :ui:
CLOSED: [2018-01-25 Thu 23:41]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-25 Thu 23:41
:END:
*** Right now certain punctuation characters such as `|` and `!` are off-center
*** That's good for freeform text but not for the game graphics
*** We should update the code in build.rs to center these characters
*** Or alternatively remove the padding from the bitmap and center them in rendering
**** That would be the technically preferable solution but harder to implement I think
**** It would also let us use the same font bitmap for actual text
**** Although maybe we want to separate graphics and text fonts anyway
** DONE Main menu
CLOSED: [2018-01-29 Mon 20:28]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-29 Mon 20:28
:END:
*** Options
**** Start a New Game
**** Help
**** Exit
*** Add the Marla Daniels quote there??
**** YES YES YES
** DONE Don't Quit the game on pressing Q once we have a menu           :ui:
CLOSED: [2018-01-29 Mon 20:28]
:PROPERTIES:
:ARCHIVE_TIME: 2018-01-29 Mon 20:28
:END:
*** Or at least always save the game
*** But really, pressing a key by accident shouldn't close the game
** DONE Saving game
CLOSED: [2018-02-03 Sat 08:23]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-03 Sat 08:23
:END:
*** Save the game when closing the window
** DONE Loading game
CLOSED: [2018-02-03 Sat 08:23]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-03 Sat 08:24
:END:
*** delete the game upon successfull load
** DONE Handle Save failures gracefully in the UI
CLOSED: [2018-02-03 Sat 08:23]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-03 Sat 08:24
:END:
*** When a game can't be saved, keep playing
*** But we must show a message in the UI to indicate this
** DONE Release build broken on worklaptop                             :bug:
CLOSED: [2018-02-05 Mon 17:22]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-05 Mon 17:22
:END:
*** It segfaults
#+BEGIN_SRC
    Finished release [optimized + debuginfo] target(s) in 389.28 secs
     Running `target/release/dose-response`
Recording the gameplay to 'replays/replay-2018-02-05T12-15-29.913'
Using the default backend: opengl
Segmentation fault (core dumped)
#+END_SRC
*** The debug build is fine though
*** We can try valgrind
#+BEGIN_SRC
==8047== Jump to the invalid address stated on the next line
==8047==    at 0x0: ???
==8047==    by 0x2AD679: glutin::platform::platform::x11::Context::new::hf410b01e793bd6a1 (x11.rs:217)
==8047==    by 0x2A8C88: new (mod.rs:58)
==8047==    by 0x2A8C88: glutin::GlWindow::new::hab35f1133b654b29 (lib.rs:322)
==8047==    by 0x24F75B: glium::backend::glutin::Display::new::h1dc6e175bf62856c (mod.rs:70)
==8047==    by 0x187C0B: dose_response::engine::glium::main_loop::h0b13abbbbd9d9d99 (glium.rs:253)
==8047==    by 0x1516B5: run_opengl (main.rs:175)
==8047==    by 0x1516B5: process_cli_and_run_game (main.rs:357)
==8047==    by 0x1516B5: dose_response::main::h4e19e89294a32849 (main.rs:373)
==8047==    by 0x153935: std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h087a363af5de5204 (rt.rs:74)
==8047==    by 0x3D25E7: {{closure}} (rt.rs:59)
==8047==    by 0x3D25E7: _ZN3std9panicking3try7do_call17h3a020153b10a6418E.llvm.5B614953 (panicking.rs:479)
==8047==    by 0x3EDBEE: __rust_maybe_catch_panic (lib.rs:102)
==8047==    by 0x3DA2F3: try<i32,closure> (panicking.rs:458)
==8047==    by 0x3DA2F3: catch_unwind<closure,i32> (panic.rs:358)
==8047==    by 0x3DA2F3: std::rt::lang_start_internal::h6da36e5a2593d5f7 (rt.rs:58)
==8047==    by 0x151901: main (rt.rs:74)
==8047==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
#+END_SRC
*** Prolly opengl?
**** so yea looks it's a glutin thing
*** It does work on Stable: `rustc 1.23.0 (766bd11c8 2018-01-01)`
**** The fixes are recorded in the `stable` branch
**** Which means chances our, we've got a lucky functioning version on geralt
**** But that means we need to pin our build process to that version or something?
**** God, I can't wait for impl Trait to land
*** Try the same stable "fix" in nightly?
**** getting the same crash
**** so this is not related to our use of the impl Trait stuff
*** DONE Check out upstream issues
CLOSED: [2018-02-05 Mon 17:21]
**** in glutin, winit and glium
**** haven't found anything
*** DONE Update all our deps
CLOSED: [2018-02-05 Mon 17:21]
**** Maybe it's something that was actually fixed in our deps or something?
**** Try updating glium, glutin and winit
**** yep, that fixed it!!
*** Println (this is a runtime error) to see where it occurs
**** This line in engine/glium.rs
let display = glium::Display::new(window, context, &events_loop).expect(...)
** DONE The "Victory" endgame screen is faded                          :bug:
CLOSED: [2018-02-06 Tue 23:28]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 17:52
:END:
*** It should be fully visible just like the death endgame screen
** DONE Fix fullscreen
CLOSED: [2018-02-04 Sun 10:08]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 17:53
:END:
*** Aspect ratio
*** Keep the screen on the same monitor
**** repro: fullscreen, windowed, fullscreen -> moves to another monitor
** DONE Don't fade when showing the main menu
CLOSED: [2018-02-16 Fri 17:54]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 17:54
:END:
*** I think we can do this by issuing another Fade call in the menu render
** DONE Mouse support for menus                                         :ui:
CLOSED: [2018-02-16 Fri 17:54]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 17:54
:END:
** DONE Add codegen-units: 1 to Cargo.toml                            :code:
CLOSED: [2018-02-16 Fri 18:04]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 18:04
:END:
*** For the release mode only
*** This should speed up the game
*** https://blog.rust-lang.org/2018/02/15/Rust-1.24.html
** DONE Fix rand compilation error on wasm                            :code:
CLOSED: [2018-02-16 Fri 20:39]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 20:39
:END:
*** We need to use master rand because of serialization support
*** But it does not compile on wasm
*** Need to fix that
*** Switch to a local checkout and investigate
** DONE Release build broken on Windows                                :bug:
CLOSED: [2018-02-16 Fri 23:06]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-16 Fri 23:06
:END:
*** try a new build with the glium update
** DONE Mouse support in wasm
CLOSED: [2018-02-18 Sun 15:33]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-18 Sun 15:33
:END:
** DONE Main menu mouse support looks ugly                              :ui:
CLOSED: [2018-02-18 Sun 16:35]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-18 Sun 16:35
:END:
*** Ugly colour
*** Asymmetric highlighted rect
** DONE Mouse support for the help screen                               :ui:
CLOSED: [2018-02-23 Fri 18:36]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-23 Fri 18:36
:END:
** DONE Mouse click within a frame                                      :ui:
CLOSED: [2018-02-23 Fri 18:36]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-23 Fri 18:36
:END:
*** Same issue we had with wasm
*** Press and releasing the mouse in the frame means the clicked event is lost
** DONE Long mouse press is treated as a stream of clicks               :ui:
CLOSED: [2018-02-23 Fri 18:36]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-23 Fri 18:36
:END:
*** This is mostly visible in the help screen
*** You click on the "next page" and instead you get to the last one
** DONE Mouse support for endgame screen                                :ui:
CLOSED: [2018-02-24 Sat 15:23]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-24 Sat 15:23
:END:
** DONE Fix the wasm build                                            :code:
CLOSED: [2018-02-24 Sat 16:41]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-24 Sat 16:41
:END:
*** TextMetrics impl need the new functions
** DONE Use rect::Rectangle for the Rectangle drawcall                :code:
CLOSED: [2018-02-24 Sat 16:55]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-24 Sat 16:55
:END:
** DONE Dismiss a msgbox with a mouse click                             :ui:
CLOSED: [2018-02-24 Sat 16:54]
:PROPERTIES:
:ARCHIVE_TIME: 2018-02-24 Sat 16:56
:END:
*** Left or right click anywhere on the screen should dismiss it
** DONE Mouse support for inventory                                     :ui:
CLOSED: [2018-03-02 Fri 17:33]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-02 Fri 17:33
:END:
** DONE Add menu button to the side panel                               :ui:
CLOSED: [2018-03-02 Fri 17:32]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-02 Fri 17:33
:END:
** DONE Remove Stats gathering from the release
CLOSED: [2018-03-07 Wed 12:40]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 12:40
:END:
** DONE Remove the windows console again
CLOSED: [2018-03-07 Wed 18:36]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 18:36
:END:
*** uncomment the lines in .cargo/config
** DONE Stringify bonus names properly
CLOSED: [2018-03-07 Wed 18:46]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 18:50
:END:
*** Right now they're CamelCase just like the enum
** DONE Test release builds don't have debug features
CLOSED: [2018-03-07 Wed 12:08]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 18:50
:END:
*** DONE Linux: no cheating and no replays
CLOSED: [2018-03-07 Wed 12:08]
*** DONE Windows: no fullscreen, no cheating and no replays
CLOSED: [2018-03-06 Tue 21:54]
** DONE Add a "published" Cargo feature                                 :ui:
CLOSED: [2018-03-07 Wed 18:51]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 18:51
:END:
*** Removes replays
**** make them a separate feature?
*** Removes cheating
**** make them a separate feature?
*** Optimises the codegen units
*** Closing in favour of separate features. Which is implemented
** DONE Remove fog of war when dead/uncovered screen
CLOSED: [2018-03-07 Wed 19:43]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-07 Wed 19:43
:END:
*** Do the same for the debug mode?
** DONE Run wasm-gc on the generated web binary
CLOSED: [2018-03-08 Thu 17:49]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-08 Thu 17:49
:END:
*** https://github.com/alexcrichton/wasm-gc
*** Should reduce the binary size
*** Need to install & test it
** DONE Examine each release zip/tarball and verify it contains everything it needs
CLOSED: [2018-03-08 Thu 21:07]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-08 Thu 21:07
:END:
*** License
*** Game binary
*** Readme
**** Split readme into actual readme and dev notes
**** In the release scripts rename README.md to README.txt
*** Wrapped in a directory!
*** Shipped the CI code to that effect
*** Need to verify [7/7]:
- [X] Windows 32 gnu
- [X] Windows 64 gnu
- [X] Linux 64
- [X] Linux 32
- [X] Windows 32 msvc
- [X] Windows 64 msvc
- [X] OSX 64
*** DONE Rename COPYING.txt to LICENSE.txt
CLOSED: [2018-03-08 Thu 19:27]
*** DONE Verify just on these:
CLOSED: [2018-03-08 Thu 21:07]
- [X] linux
- [X] windows
** DONE Fix windows broken alt+enter
CLOSED: [2018-03-09 Fri 17:30]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-09 Fri 17:30
:END:
*** look at the debug output, look at the code
*** Remove the Keypress debug output once you're done
** DONE Windows docs are unreadable because they're in unix LF format
CLOSED: [2018-03-09 Fri 20:25]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-09 Fri 20:25
:END:
*** we should convert the line ends to CR LF
*** Looks like by default, PS reads LF and spits out CR LF
*** So this should work:
Get-Content OldFile.txt | Set-Content NewFile.txt
** DONE Make the mouse highlight colour a bit brighter
CLOSED: [2018-03-10 Sat 11:38]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:38
:END:
** Replace keyboard hints with a "press ? to help" msg?                 :ui:
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:49
:END:
*** Or maybe render them in the side panel?
*** Nah, we have the Help button on the sidebar now
*** Closing this
** Store save in the right location for the system
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:50
:END:
*** https://crates.io/crates/standard_paths
**** looks good but no mac support?
*** https://crates.io/crates/xdg-basedir
*** Yeah, not for tihs one. We have just 1 save, next to the exe
** DONE Disable cheating and all debug features in the published mode :code:
CLOSED: [2018-03-10 Sat 11:50]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:50
:END:
*** I'd like that to be a different thing from the debug/release builds though
*** Say a new Cargo feature called `published`
*** And that  would gate all the debug features
**** rather than the debug/release switch
*** And actually rename CHEATING to DEBUG
** DONE Make `sort_drawcalls` more efficient?                         :code:
CLOSED: [2018-03-10 Sat 11:54]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:54
:END:
*** I really don't like having two `reverse` calls in there
** DONE save & exit/load game                                           :ui:
CLOSED: [2018-03-10 Sat 11:57]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:57
:END:
*** see how nethack 4 does it:
*** https://www.reddit.com/r/roguelikedev/comments/3jk3xm/faq_friday_20_saving/
*** could we use something similar?
** DONE Pick a good colour palette                              :ui:ARCHIVE:
CLOSED: [2018-03-10 Sat 11:57]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:58
:END:
*** Fun16 by DawnBringer
**** http://pixeljoint.com/pixelart/95350.htm
*** DB32 by DawnBringer
**** http://pixeljoint.com/forum/forum_posts.asp?TID=16247
*** Arne's 16-bit palette:
**** http://androidarts.com/palette/16pal.htm
*** Paul Tol's palette for colour blind people
**** https://personal.sron.nl/~pault/
*** A colour wheel for generating palettes
**** http://paletton.com/
** DONE Add the Marla Daniels quote                                     :ui:
CLOSED: [2018-03-10 Sat 11:58]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-10 Sat 11:58
:END:
*** When the game is launched and there aren't any saves, it should just jump into the play
**** (that was the genius of Braid)
**** (we can use the unexplored area to show help/hints)
*** Any other time, we'll show the menu with the quote & the load-game option
*** Possibly, we may show it during player's death, if it makes sense
** DONE Make the "carrying 0 doses" msg nicer                           :ui:
CLOSED: [2018-03-14 Wed 19:09]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-14 Wed 19:09
:END:
*** It looks too much like a bug instead of hinting at further possibilities
*** Suggestions by /u/Larzid
**** "You never managed to save something for a later fix"
**** "You always consumed anything you laid your eyes on"
**** https://www.reddit.com/r/roguelikedev/comments/83eosr/sharing_saturday_197/dviow65/
** DONE Give the monsters names                                     :design:
CLOSED: [2018-03-14 Wed 19:14]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-14 Wed 19:14
:END:
*** This is something that confuses people
*** The "Defeated by `D`" message is not super useful
*** And this probably wouldn't detract from the abstract nature much
** DONE Add item use tips in the Controls help page
CLOSED: [2018-03-14 Wed 19:58]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-14 Wed 19:58
:END:
*** "press [1] to eat food"
*** "or click on it in the sidebar"
** DONE Center the glyphs in the grid
CLOSED: [2018-03-14 Wed 20:22]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-14 Wed 20:23
:END:
*** they're now left-aligned to the grid
*** we need an offset when we render them
** DONE The numpad controls screen is missing a line between paragraphs :ui:
CLOSED: [2018-03-22 Thu 21:52]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-22 Thu 21:52
:END:
*** Compare with the vi screen
*** The second paragraph is right after the first on
** DONE Show the next/prev page title in the help page                  :ui:
CLOSED: [2018-03-22 Thu 22:10]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-22 Thu 22:10
:END:
*** Instead of the generic Next page / Previous page text
** DONE Strong Dose still being used on Will five??
CLOSED: [2018-03-22 Thu 23:13]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-22 Thu 23:13
:END:
*** Even thought it doesn't show the irresistible halo
** DONE Make the fonts bigger & map smaller
CLOSED: [2018-03-23 Fri 23:19]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-23 Fri 23:20
:END:
*** To make it easier to read
*** And increase the claustrophobic feeling
*** Need to test this on worklaptop
**** And also with wasm
***** It will require different code there
***** Actually, that might make rendering easier
***** So maybe we want to test it there
*** Give enough margin to run this in most scenarios
** DONE Fix the help screen text rendering issues
CLOSED: [2018-03-23 Fri 23:37]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-23 Fri 23:37
:END:
*** The windows are smaller now
*** The current text doesn't all fit.
** DONE The control hints are too wide                                  :ui:
CLOSED: [2018-03-26 Mon 12:43]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-26 Mon 12:43
:END:
*** Now that we're using proper text rendering, lets adjust the width
*** Also, they're now squished too much
** DONE Fix mouse position in fullscreen                                :ui:
CLOSED: [2018-03-26 Mon 12:43]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-26 Mon 12:43
:END:
*** Looks like the Y coord is right but X is off (on geralt)
*** But: Y is wrong and X is right on worklaptop
** DONE Figure out the worklaptop fullscreen issue
CLOSED: [2018-03-26 Mon 12:43]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-26 Mon 12:43
:END:
*** I think we should only operate with whole numbers
*** So when calculating the tile size, floor it to a whole number
*** Then calculate the actual width & hight using the scaled tile size
*** Then add extra to both width & height (even if it's just like 1-2 pxels)
*** That should mean everything is whole numbers
*** And that should fix the mouse calculation
** DONE Pressing [3] does not use the CardinalDose                      :ui:
CLOSED: [2018-03-27 Tue 10:26]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-27 Tue 10:26
:END:
*** Mouse works though
*** So something to do with the key processing
** DONE Cardinal and Diagonal doses are worse than food in AoE
CLOSED: [2018-03-27 Tue 10:33]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-27 Tue 10:33
:END:
*** They only have a 1 space killing radius
*** Should be 2
** DONE Fix screen fading in wasm
CLOSED: [2018-03-29 Thu 15:56]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-29 Thu 15:56
:END:
** DONE "What is Dose Response?" help page                              :ui:
CLOSED: [2018-03-29 Thu 15:56]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-29 Thu 15:56
:END:
*** every life matters
*** you'll be losing a lot
*** but every death is an opportunity to learn
** DONE Write a "Legend" help page
CLOSED: [2018-03-29 Thu 15:56]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-29 Thu 15:56
:END:
*** Describe the all the glyphs
*** %: food
*** i: dose
*** + and x: cardinal and diagonal dose
*** I: strong dose
*** monsters
** DONE Update the font size in wasm
CLOSED: [2018-03-29 Thu 15:56]
:PROPERTIES:
:ARCHIVE_TIME: 2018-03-29 Thu 15:56
:END:
** DONE The scrolling doesn't feel right                                :ui:
CLOSED: [2018-04-03 Tue 18:05]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-03 Tue 18:05
:END:
*** Always center the camera on the player?
**** I think this is worse because it's harder to see the monsters move
***** Because the entire map has moved
***** So there's no specific perceived motion
***** We'd have to probably move the monsters with an animation at a later frame
**** Could we try to just smooth-scroll the one tile transition?
***** That would require scrolling the map independently of the player though
****** Could we move the player and then re-center?
******* Would probably require smooth srolling
******* TODO Although maybe just making it two-step (move, recenter) is enough
****** Isn't that what Cardinal Quest does?
******* CQ processes everything at once and then animates it
******** The player moves
******** The monsters move
******** The screen recenters
******* All that is animated at the same time
******* There's no "player moves and then the monsters move"
***** Also, this would look weird for the diagonal movement
****** The player would actually be animated crossing walls
****** Kind of weird right?
*** DONE Or: implement smooth sclolling?
CLOSED: [2018-04-03 Tue 18:05]
**** And maybe nonlinear?
*** Make it optional in the menu?
** DONE Process keys during recenter animation                        :code:
CLOSED: [2018-04-04 Wed 19:00]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-04 Wed 19:00
:END:
*** Even if we don't actually want to move the character at that point
*** We should still process the keys and add them to the queue
** DONE Keep the control hints on for longer                            :ui:
CLOSED: [2018-04-04 Wed 19:04]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-04 Wed 19:04
:END:
*** Now that we've made the map smaller they disappear after the first move
*** Let's make them stick at least for a while longer
** DONE Dose glow and unexplored areas should have different colours
CLOSED: [2018-04-08 Sun 17:53]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-08 Sun 17:53
:END:
** DONE Pressing `?` doesn't work in SDL                               :bug:
CLOSED: [2018-04-11 Wed 18:59]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-11 Wed 18:59
:END:
** DONE Render the areas being scrolled to
CLOSED: [2018-04-11 Wed 18:59]
:PROPERTIES:
:ARCHIVE_TIME: 2018-04-11 Wed 18:59
:END:
*** right now when scrolling, the new area is dark
*** and it only gets filled in when the scrolling ends
** DONE Scrolling to right shows the health/mind bar for a second      :bug:
CLOSED: [2018-05-06 Sun 14:29]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-06 Sun 14:29
:END:
*** This is an artifact of the background map thingy
*** We're messing something up
*** Make the BackgroundMap a gamestate thing
*** Move all draw::char and draw::background calls to it
*** Iterate over it in the engine
*** Remove the draw::char and draw::background calls
** DONE Simplify engine drawcalls                                     :code:
CLOSED: [2018-05-06 Sun 14:29]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-06 Sun 14:29
:END:
*** Let the engine just render positioned rectangles and sprites
*** Something similar to the `SDLDrawcalls` situation right now
*** And any higher-level abstraction should live outside of the backend
**** It could live in engine::mod
**** Like text text formatting etc.
*** We'd have to update the wasm backend as well
**** assuming we can render from image as well it should simplify the client
**** And it will give every backend a unified look
*** Could also improve perf sorta maybe kinda?
** DONE Figure out the fading timing issue                              :ui:
CLOSED: [2018-05-06 Sun 14:40]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-06 Sun 14:40
:END:
*** Sometimes it fades out too quickly
*** Other times it takes its sweet time
*** QUESTION: does this carry through to a replay?
*** This seems to have been resolved now
**** I think we were setting the alpha wrong or something?
**** Closing this for now, we can reopen
** DONE Build a SDL + OpenGL backend
CLOSED: [2018-05-07 Mon 11:25]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 11:25
:END:
*** See if that resolves the flicker worklaptop issue
** DONE Implement proper fullscreen in SDL                              :ui:
CLOSED: [2018-05-07 Mon 11:25]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 11:25
:END:
*** We can switch to fullscreen but it's not stretching the game
** DONE Figure out the occasional flicker on worklaptop
CLOSED: [2018-05-07 Mon 11:25]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 11:25
:END:
*** This seems to go like crazy when I'm playing a video from the GDC vault
*** Using SDL+OpenGL fixed it
** DONE Load the texture image size from within the webgl/js instead of hardcoding it
CLOSED: [2018-05-07 Mon 12:05]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 12:05
:END:
** DONE Move the webgl shaders out of html
CLOSED: [2018-05-07 Mon 14:01]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 14:01
:END:
*** otherwise we have to copy them manually to the website every time we change them
** DONE Deduplicate the glium and webgl shaders
CLOSED: [2018-05-07 Mon 19:52]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-07 Mon 19:52
:END:
*** Their structure should be identical
*** But some of the syntax isn't
*** Can we translate one into the other with the build script?
** DONE Update the Glium/Glutin/Winit libs
CLOSED: [2018-05-15 Tue 23:30]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-15 Tue 23:30
:END:
*** Test they still work on windows & linux
** DONE Test SDL fullscreen on windows
CLOSED: [2018-05-10 Thu 09:19]
:PROPERTIES:
:ARCHIVE_TIME: 2018-05-15 Tue 23:30
:END:
*** Make sure you run it with the --sdl backend
*** YEP! WORKY
** DONE Set the default rendering backend to SDL
CLOSED: [2018-06-03 Sun 22:29]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-03 Sun 22:29
:END:
*** At least on Linux and Windows
** DONE Publish SDL-based binaries
CLOSED: [2018-06-08 Fri 11:18]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-08 Fri 11:18
:END:
*** NOTE: for linux we need post-processing.
**** To add the right libsdl build
**** Start publishing them on the website now
**** Write the post-processing script
*** For linux, windows and mac
*** Generated by the CI
*** On Linux
**** The bundled SDL feature on Linux built on CI doesn't work
thread 'main' panicked at 'SDL video subsystem creation failed.: "No available video device"', libcore/result.rs:945:5
**** Looks like it was maybe compiled without any video support since it was done on a headless system?
**** Using the steamrt binaries seems to work on worklaptop though
***** DONE Try them on geralt as well
CLOSED: [2018-05-09 Wed 19:18]
****** It works just fine
**** We should set the rpath and then release a known working *.so binary
*** On MSVC
**** The bundled SDL works, so does the one downloaded from the libsdl site
**** NOTE: MSVC still shows the commandline window, we need to remove that
***** DONE That should be fixed by setting the windows_subsystem crate attribute
CLOSED: [2018-05-09 Wed 22:40]
*** On MINGW
**** CI fails with this error
#+BEGIN_SRC
error: failed to run custom build command for `sdl2-sys v0.31.0`
process didn't exit successfully: `C:\projects\dose-response\target\release\build\sdl2-sys-d7148815df13b761\build-script-build` (exit code: 101)
--- stdout
running: "cmake" "C:\\projects\\dose-response\\target\\x86_64-pc-windows-gnu\\release\\build\\sdl2-sys-69f452340499d82b\\out\\SDL2-2.0.5" "-G" "MSYS Makefiles" "-DSDL_SHARED=ON" "-DSDL_STATIC=OFF" "-DCMAKE_INSTALL_PREFIX=C:\\projects\\dose-response\\target\\x86_64-pc-windows-gnu\\release\\build\\sdl2-sys-69f452340499d82b\\out" "-DCMAKE_C_FLAGS= -ffunction-sections -fdata-sections -m64" "-DCMAKE_CXX_FLAGS= -ffunction-sections -fdata-sections -m64" "-DCMAKE_BUILD_TYPE=Release"
-- Configuring incomplete, errors occurred!

--- stderr
CMake Error: CMake was unable to find a build program corresponding to "MSYS Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMake was unable to find a build program corresponding to "MSYS Makefiles".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.
CMake Error: CMAKE_C_COMPILER not set, after EnableLanguage
CMake Error: CMAKE_AR was not found, please set to archive program.
thread 'main' panicked at '
command did not execute successfully, got: exit code: 1

build script failed, must exit now', C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\cmake-0.1.31\src\lib.rs:643:5
note: Run with `RUST_BACKTRACE=1` for a backtrace.
#+END_SRC
*** On OSX
**** the SDL downloaded from the website has a DMG extension
***** Figure out what is that
****** It's a package you need to install apparently?
****** When I tried to extract it, it didn't have the *.dylib files
****** But it did have a `SDL2.framework/Versions/A/SDL2` file
******* Which seems to contain the necessary files maybe kind of somehow?
******* It's a binary but when I looked into it it seemed to have the necessary bits
****** Read up on how does Mac do dylibs
******* Do they do LD_LIBRARY_PATH as well?
******* Do they do rpath?
**** Try renting https://www.macincloud.com/
**** DONE Test the built & official binaries somewhere
CLOSED: [2018-06-03 Sun 21:33]
***** see if we could just install libsndio there and build the image?
**** I've tried to use the "static-link" feature of SDL
***** It doesn't work on linux because it needs to link sndio
***** But it builds on Windows and Mac
***** DONE Test the static Windows binaries
CLOSED: [2018-06-03 Sun 17:45]
****** seems to work fine on windows
***** DONE Test the static OSX binaries
CLOSED: [2018-06-03 Sun 21:33]
****** Asked people around my social circles
****** Huge help by: https://icosahedron.website/@cpsdqs
***** DONE If it works, try switching to SDL + bundled as default
CLOSED: [2018-06-03 Sun 21:33]
****** and build an image for linux
****** or disable it there
*** Remove the built library deps if they're not needed?
**** Although they may be useful for post-processing
**** Maybe for the windows case or something
**** Or maybe mac
**** Check out the libtcod instructions and Jared's blog post?
**** And also google "using sdl on the mac"
** DONE The Opera Web version seems to eat all memory                  :bug:
CLOSED: [2018-06-08 Fri 11:28]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-08 Fri 11:28
:END:
*** https://www.reddit.com/r/roguelikedev/comments/8iscq1/sharing_saturday_206/dyx2fgo/
*** Repro on Chromium
*** Repro on Firefox
*** All that's necessary is to just leave the game running, no need to do anything to it
*** Try commenting out the rendering part but keep running wasm
**** Is it the new opengl stuff?
*** DONE Publish a new version on the project play website
CLOSED: [2018-06-08 Fri 11:18]
** DONE Log errors to a file?
CLOSED: [2018-06-08 Fri 11:32]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-08 Fri 11:32
:END:
*** this would help us debug stuff on windows where we don't show the console anymore
*** https://crates.io/crates/log
** DONE The order of keys and doses in the inventory is wrong          :bug:
CLOSED: [2018-06-12 Tue 13:53]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-12 Tue 13:53
:END:
*** https://www.reddit.com/r/roguelikedev/comments/8iscq1/sharing_saturday_206/dyx2fgo/
*** Apparently the strong dose appears before diagonal and cardinal in the list
*** But the keys to use them don't reflect that...
** DONE It doesn't say anywhere that you can only have 1 bonus         :bug:
CLOSED: [2018-06-12 Tue 16:48]
:PROPERTIES:
:ARCHIVE_TIME: 2018-06-12 Tue 16:48
:END:
*** We should add it to the help page
** DONE Replays are broken with alternating the turns                  :bug:
CLOSED: [2018-09-13 Thu 14:42]
:PROPERTIES:
:ARCHIVE_TIME: 2018-09-13 Thu 14:42
:END:
*** Actually, the crash seems to occur precisely at the time we take a dose
*** test if we can prolong it with food
*** check if this is a new thing or happens on earlier commits too
*** the player/monster order is swapped in replay
**** This is a play session:
17:28:36 [INFO] Recording the gameplay to 'replays/replay-2018-09-13T11-28-36.280'
17:28:36 [INFO] Using the sdl backend
Player command: NE
Player action: Move(Point{x: 1, y: -1})
17:28:38 [INFO] Turn 0 has ended.
17:28:38 [INFO] Processing monster Point{x: -27, y: -7}, Shadows
17:28:38 [INFO] Action: Move(Point{x: -21, y: -2})
17:28:38 [INFO] Processing monster Point{x: -23, y: -27}, Voices
17:28:38 [INFO] Action: Move(Point{x: -19, y: -20})
17:28:38 [INFO] Processing monster Point{x: -9, y: 27}, Voices
17:28:38 [INFO] Action: Move(Point{x: -2, y: 30})
17:28:38 [INFO] Processing monster Point{x: 1, y: -27}, Voices
17:28:38 [INFO] Action: Move(Point{x: 1, y: -28})
17:28:38 [INFO] Processing monster Point{x: 26, y: 12}, Shadows
17:28:38 [INFO] Action: Move(Point{x: 22, y: 17})
17:28:38 [INFO] Processing monster Point{x: 27, y: 22}, Voices
17:28:38 [INFO] Action: Move(Point{x: 30, y: 16})
17:28:38 [INFO] Processing monster Point{x: 29, y: -16}, Voices
17:28:38 [INFO] Action: Move(Point{x: 26, y: -13})
Player command: E
Player action: Move(Point{x: 2, y: -1})
17:28:39 [INFO] Turn 1 has ended.
**** This is a replay session:
17:29:01 [INFO] Replaying game log: 'replays/replay-2018-09-13T11-28-36.280'
17:29:01 [INFO] Using the sdl backend
Player command: NE
Player action: Move(Point{x: 1, y: -1})
17:29:01 [INFO] Turn 0 has ended.
Player command: E
Player action: Move(Point{x: 2, y: -1})
17:29:01 [INFO] Processing monster Point{x: -27, y: -7}, Shadows
17:29:01 [INFO] Action: Move(Point{x: -21, y: -2})
17:29:01 [INFO] Processing monster Point{x: -23, y: -27}, Voices
17:29:01 [INFO] Action: Move(Point{x: -19, y: -20})
17:29:01 [INFO] Processing monster Point{x: -9, y: 27}, Voices
17:29:01 [INFO] Action: Move(Point{x: -2, y: 30})
17:29:01 [INFO] Processing monster Point{x: 1, y: -27}, Voices
17:29:01 [INFO] Action: Move(Point{x: 1, y: -28})
17:29:01 [INFO] Processing monster Point{x: 26, y: 12}, Shadows
17:29:01 [INFO] Action: Move(Point{x: 22, y: 17})
17:29:01 [INFO] Processing monster Point{x: 27, y: 22}, Voices
17:29:01 [INFO] Action: Move(Point{x: 30, y: 16})
17:29:01 [INFO] Processing monster Point{x: 29, y: -16}, Voices
17:29:01 [INFO] Action: Move(Point{x: 26, y: -13})
17:29:01 [INFO] Turn 1 has ended.
**** In the game session, the monsters go first and then the player takes turn
**** In the replay session, the player goes first and then the monsters take turn
*** I think I now:
**** at the beginning of a turn, the player has AP, monsters have AP
**** player has no commands
**** so the monsters move
**** then the player moves
**** but during replays, the player always has a command so they move first
**** we need to rethink how the turn structure works
**** so the big diff is that during normal play, the Player has no waiting IP but the replay does
**** do we want to maintain that or just record & replay "no op" turns?
***** and therefore make the replay closer to the real thing?
*** Hey so I think we actually have a bug
**** If the player has 2 APs
**** And the depression does too
**** The depression will move twice I think?
**** yeah so if player has 2 APs they move twice then depression moves twice
*** So this "feature" as it is is broken now even on normal play
**** "wait for player then move monsters in the same frame" scenario
***** this works if the player has more or equal APs to the monsters
***** until the player moves, nothing happens
***** when the player does move, the monsters move
***** if the monsters has extra APs, monsters wait until the player moves again
***** we end turn & reset APs when there's nothing left
**** problem: what if player has fewer turns
***** this is the standard scenario: player 1 AP, depression 2 APs
***** so in that scenario, the Ds would deadlock
****** waiting for player to take their turn
****** but player can't because they have no more APs
**** still, in general this is the way to go
**** how about monsters wait for player to take action but player can say NOP?
***** monsters don't move until they're told so
***** they can move if:
****** the player has spent an AP
****** the player has 0 APs
***** Yep looks like that fixed it
** DONE Full turn taking is confusing to players                       :bug:
CLOSED: [2018-09-13 Thu 14:42]
:PROPERTIES:
:ARCHIVE_TIME: 2018-09-13 Thu 14:42
:END:
*** https://www.reddit.com/r/roguelikedev/comments/8iscq1/sharing_saturday_206/dyx2fgo/
*** When we have 2 action points, people expect the PC to take one, then depression take one then the player take the one,...
*** This didn't fit my initial mental model but it's probably in line with their expectations
*** And it shouldn't break the game
** DONE Apparently can reach the edge of the map??                     :bug:
CLOSED: [2018-09-23 Sun 11:19]
:PROPERTIES:
:ARCHIVE_TIME: 2018-09-23 Sun 11:19
:END:
*** replays/replay-2018-09-13T14-34-57.075
** DONE Debug entity info is broken                                    :bug:
CLOSED: [2018-09-26 Wed 14:51]
:PROPERTIES:
:ARCHIVE_TIME: 2018-09-26 Wed 14:51
:END:
*** Right-click on a player, the info flickers and then disappears
*** Also alt-enter seems to just flicker instead of staying full screen
*** Is that only the case in SDL?
**** try test it with winit
**** it's possible our keyboard handling is messed up with the sdl backend
*** So click down doesn't register at all
**** only
** DONE Add Victory NPC
CLOSED: [2018-10-13 Sat 12:46]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-13 Sat 12:46
:END:
*** It doesn't move
*** When bumped into, win the game
*** Same colour as the Player?
** DONE Place Victory NPC with a cheat command
CLOSED: [2018-10-13 Sat 15:06]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-13 Sat 15:06
:END:
*** pressing 'v' in a cheat mode will spawn the NPC
*** that way the basic game is not distracted
*** we can test things like the screen scrolling animation with it
** DONE Delete Victory NPC when High
CLOSED: [2018-10-14 Sun 14:05]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-14 Sun 14:15
:END:
*** What about the highlighted path?
*** If we keep it, people would still try to follow up
**** and be dismayed when they don't find anything there
** DONE Highlight the way to a Victory NPC
CLOSED: [2018-10-14 Sun 22:18]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-14 Sun 22:18
:END:
*** Highlight path from player's position towards it
*** Briefly scroll towards the NPC and back?
** DONE Make the highlighted path to the Victory NPC easier to notice
CLOSED: [2018-10-14 Sun 23:00]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-14 Sun 23:00
:END:
*** like, say 3 cells wide or something
** DONE Make sure the Victory NPC is reachable
CLOSED: [2018-10-29 Mon 08:29]
:PROPERTIES:
:ARCHIVE_TIME: 2018-10-29 Mon 08:29
:END:
*** It must have a path form the player
*** And it must be at a tile that's not occupied
